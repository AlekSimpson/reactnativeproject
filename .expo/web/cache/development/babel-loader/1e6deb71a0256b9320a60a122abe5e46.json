{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/PauseOrCancelView.js\";\nimport * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from \"./updatePrinters.js\";\nimport { ConfirmCancelView } from \"./ConfirmCancelView.js\";\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar CircleDiameter = windowWidth / 1.5;\nvar StatusCodes = {\n  0: 'Offline',\n  1: 'Asleep',\n  2: 'Printing',\n  3: 'Paused'\n};\nvar toggleControlCodes = {\n  2: 3,\n  3: 2\n};\nvar styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: 'center',\n    marginTop: windowHeight / 22\n  }\n});\n\nfunction Divider() {\n  return React.createElement(View, {\n    style: {\n      backgroundColor: 'gray',\n      height: 0.5,\n      width: CircleDiameter - 20,\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  });\n}\n\nfunction PauseOrCancelView(printer) {\n  var temp;\n  var listPrinters = useSelector(function (state) {\n    temp = _toConsumableArray(state);\n    return state;\n  });\n  var dispatch = useDispatch();\n  var title = StatusCodes[printer.printer.status];\n\n  function findPrinter() {\n    var returnValue;\n\n    for (i = 0; i < temp.length; i++) {\n      if (temp[i].id == printer.printer.id) {\n        returnValue = i;\n      }\n    }\n\n    return returnValue;\n  }\n\n  function updateStatus(newStatus) {\n    var printerArray = _toConsumableArray(listPrinters);\n\n    var i = findPrinter();\n    printerArray[i].status = newStatus;\n    dispatch(updatePrinter(printerArray));\n    printer.toggleShowPause();\n  }\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showConfirmCancel = _useState2[0],\n      setConfirmCancel = _useState2[1];\n\n  return React.createElement(React.Fragment, null, !showConfirmCancel && React.createElement(View, {\n    style: styles.view,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: title,\n    onPress: function onPress() {\n      return updateStatus(toggleControlCodes[printer.printer.status]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }), React.createElement(Button, {\n    color: \"rgb(220, 53, 70)\",\n    title: \"Cancel\",\n    onPress: function onPress() {\n      return setConfirmCancel(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })), showConfirmCancel && React.createElement(ConfirmCancelView, {\n    printer: printer.printer,\n    toggleBack: printer.toggleShowPause,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport { PauseOrCancelView };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/PauseOrCancelView.js"],"names":["React","useEffect","useState","useReducer","useSelector","useDispatch","updatePrinter","ConfirmCancelView","windowWidth","Dimensions","get","width","windowHeight","height","CircleDiameter","StatusCodes","toggleControlCodes","styles","StyleSheet","create","view","flex","justifyContent","marginTop","Divider","backgroundColor","PauseOrCancelView","printer","temp","listPrinters","state","dispatch","title","status","findPrinter","returnValue","i","length","id","updateStatus","newStatus","printerArray","toggleShowPause","showConfirmCancel","setConfirmCancel"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react'\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from './updatePrinters.js';\nimport { ConfirmCancelView } from './ConfirmCancelView.js'\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst CircleDiameter = (windowWidth / 1.5)\n\nlet StatusCodes = { 0: 'Offline', 1: 'Asleep', 2: 'Printing', 3: 'Paused' }\n\nlet toggleControlCodes = { 2: 3, 3: 2 } \n\nconst styles = StyleSheet.create({\n  view:\n  {\n    flex: 1,\n    justifyContent: 'center',\n    //position: 'absolute',\n    //bottom: 0,\n    marginTop: windowHeight / 22\n  }\n})\n\nfunction Divider()\n{\n  return(\n    <View\n      style={{\n        backgroundColor: 'gray',\n        height: 0.5,\n        width: CircleDiameter - 20,\n        marginTop: 10\n      }}\n    />\n  )\n}\n\nfunction PauseOrCancelView(printer)\n{\n  var temp;\n  const listPrinters = useSelector(state => { temp = [...state]; return state })\n  const dispatch = useDispatch()\n\n  var title = StatusCodes[printer.printer.status]\n\n  //Returns the index of the printer that was passed in\n  function findPrinter()\n  {\n    var returnValue;\n    \n    for (i = 0; i < temp.length; i++)\n    {\n      if (temp[i].id == printer.printer.id)\n      {\n        returnValue = i\n      }\n    }\n    return returnValue\n  }\n\n  //Updates the global state of a certain printer\n  function updateStatus(newStatus)\n  {\n    var printerArray = [...listPrinters]\n    let i = findPrinter()\n\n    printerArray[i].status = newStatus\n\n    dispatch(updatePrinter(printerArray))\n    printer.toggleShowPause()\n  }\n\n  const [showConfirmCancel, setConfirmCancel] = useState(false)\n\n  //Cancel button should go to the confirm cancel view, action for cancel button //updateStatus(1)\n  return(\n    <>\n      {(!showConfirmCancel) &&\n        <View style={styles.view}>\n          <Button title={title} onPress={() => updateStatus(toggleControlCodes[printer.printer.status])}/>\n          <Divider/>\n          <Button color = 'rgb(220, 53, 70)' title=\"Cancel\" onPress={() => setConfirmCancel(true)}/>\n        </View>\n      }\n      {(showConfirmCancel) &&\n        <ConfirmCancelView printer={printer.printer} toggleBack={printer.toggleShowPause}/>\n      }\n    </>\n    \n  )\n}\n\nexport {PauseOrCancelView};"]},"metadata":{},"sourceType":"module"}
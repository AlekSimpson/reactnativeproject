{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/DetailScreen.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { TemperatureView } from \"./TempView.js\";\nimport { CompletionView } from \"./CompletionView.js\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { LoadingCard } from \"./LoadingCardView.js\";\nimport { useEffect, useState } from 'react';\nimport { updatePrinter } from \"./updatePrinters.js\";\nimport { DetailScreenStyles as styles } from \"./Styles.js\";\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar width = windowWidth >= 700 ? windowWidth / 3 : windowWidth;\n\nfunction DetailsScreen(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showImage = _useState2[0],\n      setImage = _useState2[1];\n\n  var printer = route.params.printer;\n  var images = useSelector(function (state) {\n    return state.imageDict;\n  });\n  var headTemp = printer.printerState != null ? printer.printerState.temps.head.currentTemp : '--';\n  var bedTemp = printer.printerState != null ? printer.printerState.temps.bed.currentTemp : '--';\n  var percentFinished = 0;\n\n  if (printer.printerState != null) {\n    if (printer.printerState.progress != null) {\n      percentFinished = Math.round(printer.printerState.progress * 100);\n    }\n  }\n\n  var loadingStyle = {\n    marginBottom: 25,\n    position: 'absolute',\n    bottom: 0\n  };\n\n  function handleChange() {\n    setImage(true);\n  }\n\n  useEffect(function () {\n    setTimeout(handleChange, 500);\n  }, []);\n  return React.createElement(View, {\n    style: styles.background,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(CompletionView, {\n    text: 'Completed',\n    viewType: \"detail\",\n    fontSize: windowWidth / 6,\n    textPos: windowHeight / 8.5,\n    printer: printer,\n    isCardView: false,\n    percent: percentFinished,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), React.createElement(TemperatureView, {\n    headTemp: headTemp,\n    bedTemp: bedTemp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), !showImage && React.createElement(LoadingCard, {\n    showAnimation: false,\n    showBanner: false,\n    extraStyle: loadingStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), showImage && React.createElement(Image, {\n    source: {\n      uri: images[printer.id]\n    },\n    defaultSource: require(\"./LocalAssets/default4.png\"),\n    loadingIndicatorSource: require(\"./LocalAssets/default4.png\"),\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport { DetailsScreen };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/DetailScreen.js"],"names":["React","TemperatureView","CompletionView","useSelector","useDispatch","LoadingCard","useEffect","useState","updatePrinter","DetailScreenStyles","styles","windowWidth","Dimensions","get","width","windowHeight","height","DetailsScreen","route","showImage","setImage","printer","params","images","state","imageDict","headTemp","printerState","temps","head","currentTemp","bedTemp","bed","percentFinished","progress","Math","round","loadingStyle","marginBottom","position","bottom","handleChange","setTimeout","background","uri","id","require","image"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport { TemperatureView } from './TempView.js';\nimport { CompletionView } from './CompletionView.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { LoadingCard } from './LoadingCardView.js';\nimport { useEffect, useState } from 'react'\nimport { updatePrinter } from './updatePrinters.js';\nimport { DetailScreenStyles as styles } from './Styles.js'\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst width = (windowWidth >= 700 ? (windowWidth / 3) : windowWidth)\n\nfunction DetailsScreen({route})\n{\n  const [showImage, setImage] = useState(false)\n  const { printer } = route.params;\n  const images = useSelector(state => { return state.imageDict })\n  var headTemp = (printer.printerState != null ? printer.printerState.temps.head.currentTemp : '--')\n  var bedTemp = (printer.printerState != null ? printer.printerState.temps.bed.currentTemp : '--')\n\n  var percentFinished = 0;\n\n  if (printer.printerState != null)\n  {\n    if (printer.printerState.progress != null)\n    {\n      percentFinished = Math.round(printer.printerState.progress * 100)\n    }\n  }\n\n  const loadingStyle = {\n    marginBottom: 25,\n    position: 'absolute',\n    bottom: 0\n  }\n\n  function handleChange()\n  {\n    setImage(true)\n  }\n  \n  useEffect(() => \n  {\n    setTimeout(handleChange, 500)\n  }, [])\n\n  return (\n    <View style={ styles.background }>\n      <CompletionView text={'Completed'} viewType='detail' fontSize={windowWidth / 6} textPos={windowHeight / 8.5} printer={printer} isCardView={false} percent={percentFinished} />\n      <TemperatureView headTemp={headTemp} bedTemp={bedTemp}/>\n      {(!showImage)&&\n        <LoadingCard showAnimation={false}  showBanner={false} extraStyle={loadingStyle}/>\n      }\n      {(showImage)&&\n        <Image\n          source= {{ uri: images[printer.id] }}\n          defaultSource = { require(\"./LocalAssets/default4.png\") }\n          loadingIndicatorSource={require('./LocalAssets/default4.png')}\n          style={ styles.image }\n        />\n      }\n    </View>\n  );\n}\nexport {DetailsScreen};"]},"metadata":{},"sourceType":"module"}
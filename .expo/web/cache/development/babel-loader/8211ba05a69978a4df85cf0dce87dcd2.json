{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/App.js\";\nimport Amplify, { Storage } from 'aws-amplify';\nimport config from \"./aws-exports\";\nimport { Auth } from 'aws-amplify';\nAmplify.configure(config);\nimport 'react-native-gesture-handler';\nimport * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { DetailsScreen } from \"./DetailScreen.js\";\nimport { SettingsPage } from \"./SettingsPage.js\";\nimport { withAuthenticator } from 'aws-amplify-react-native';\nimport { CardView } from \"./CardView.js\";\nimport * as FileSystem from 'expo-file-system';\nimport * as Permissions from 'expo-permissions';\nimport * as Notifications from 'expo-notifications';\nimport { Provider } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from \"./actions/updatePrinters.js\";\nimport store from \"./store.js\";\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { printersByOwner, listPrints } from \"./graphql/queries\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nYellowBox.ignoreWarnings(['Non-serializable values were found in the navigation state']);\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  },\n  image: {\n    width: windowWidth - 30,\n    height: windowHeight / 4,\n    paddingTop: '2%',\n    paddingBottom: '2%',\n    marginTop: 25,\n    shadowColor: 'transparent',\n    borderRadius: 10\n  },\n  touchable: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgb(21, 34, 56)'\n  },\n  printerNameText: {\n    fontSize: 200,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    marginLeft: 10,\n    marginBottom: 7\n  },\n  printerStatusText: {\n    fontSize: 15,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    right: 0,\n    position: 'absolute',\n    marginRight: 10,\n    marginBottom: 10\n  },\n  cardCompletionViewStyle: {\n    borderRadius: Math.round(windowWidth + windowHeight) / 2,\n    width: windowWidth / (windowWidth / 125),\n    height: windowWidth / (windowWidth / 125),\n    borderColor: 'rgba(255, 255, 255, .3)',\n    borderWidth: 5,\n    alignItems: 'center',\n    position: 'absolute',\n    right: 0,\n    marginRight: 10,\n    marginTop: windowHeight / 60\n  }\n});\n\nfunction calculateTimeExpired(printer) {\n  var currentTime = new Date();\n  var printerUpdated = new Date(printer.updatedAt);\n  var diff = Math.abs(currentTime - printerUpdated) / 1000;\n  var expiredTime = diff > 5 * 60;\n  return expiredTime;\n}\n\nfunction RenderButtons(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      images = _useState2[0],\n      setImages = _useState2[1];\n\n  var listPrinters = useSelector(function (state) {\n    return state;\n  });\n  var dispatch = useDispatch();\n  var printerImageDict = {};\n  useEffect(function () {\n    fetchPrinters();\n  }, []);\n  var tempListPrinters = [];\n\n  function fetchPrinters() {\n    var nextToken,\n        user,\n        printerData,\n        printers,\n        newNextToken,\n        data,\n        _args = arguments;\n    return _regeneratorRuntime.async(function fetchPrinters$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            nextToken = _args.length > 0 && _args[0] !== undefined ? _args[0] : null;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Auth.currentUserInfo());\n\n          case 4:\n            user = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(printersByOwner, {\n              owner: user.username,\n              nextToken: nextToken\n            })));\n\n          case 7:\n            printerData = _context.sent;\n            printers = printerData.data.printersByOwner.items;\n            newNextToken = printerData.data.printersByOwner.nextToken;\n            tempListPrinters = tempListPrinters.concat(printers);\n\n            if (!(newNextToken != null)) {\n              _context.next = 15;\n              break;\n            }\n\n            fetchPrinters(newNextToken);\n            _context.next = 20;\n            break;\n\n          case 15:\n            dispatch(updatePrinter(tempListPrinters));\n            _context.next = 18;\n            return _regeneratorRuntime.awrap(checkForSavedData());\n\n          case 18:\n            data = _context.sent;\n\n            if (data.length !== 0) {\n              retrieveFromStorage();\n            } else {\n              downloadAllImages();\n            }\n\n          case 20:\n            _context.next = 25;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 22]], Promise);\n  }\n\n  function addToDict(key, value, save) {\n    printerImageDict[key] = value;\n\n    if (save) {\n      saveImage(value, key + '.jpg');\n    }\n\n    if (Object.keys(printerImageDict).length == tempListPrinters.length) {\n      setImages(printerImageDict);\n    }\n  }\n\n  function downloadImage(printer) {\n    Storage.get(printer.picture.key, {\n      level: 'public',\n      customPrefix: {\n        public: ''\n      }\n    }).then(function (result) {\n      return addToDict(printer.id, result, true);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  function downloadAllImages() {\n    for (i = 0; i < tempListPrinters.length; i++) {\n      downloadImage(tempListPrinters[i]);\n    }\n  }\n\n  function saveImage(url, fileName) {\n    FileSystem.downloadAsync(url, FileSystem.documentDirectory + fileName).then(function (_ref2) {\n      var uri = _ref2.uri;\n      console.log('Finished downloading to ', uri);\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  function checkForSavedData() {\n    var returnValue, path, data;\n    return _regeneratorRuntime.async(function checkForSavedData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            returnValue = [];\n            i = 0;\n\n          case 2:\n            if (!(i < tempListPrinters.length)) {\n              _context2.next = 11;\n              break;\n            }\n\n            path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg';\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(path));\n\n          case 6:\n            data = _context2.sent;\n\n            if (data.exists) {\n              returnValue = returnValue.concat(path);\n            }\n\n          case 8:\n            i++;\n            _context2.next = 2;\n            break;\n\n          case 11:\n            return _context2.abrupt(\"return\", returnValue);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function deleteSavedData() {\n    var data;\n    return _regeneratorRuntime.async(function deleteSavedData$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(checkForSavedData());\n\n          case 2:\n            data = _context3.sent;\n            console.log('data thing ', data);\n            i = 0;\n\n          case 5:\n            if (!(i < data.length)) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(FileSystem.deleteAsync(data[i]));\n\n          case 8:\n            console.log('deleted');\n\n          case 9:\n            i++;\n            _context3.next = 5;\n            break;\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function retrieveFromStorage() {\n    for (i = 0; i < tempListPrinters.length; i++) {\n      var path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg';\n      addToDict(tempListPrinters[i].id, path, false);\n    }\n  }\n\n  function offlineDetection() {\n    var i = 0;\n    listPrinters.forEach(function (printer) {\n      if (printer.printerState != null) {\n        if (printer.printerState.status != 0) {\n          var timeExpired = calculateTimeExpired(printer);\n\n          if (timeExpired) {\n            var newListPrinters = _toConsumableArray(listPrinters);\n\n            newListPrinters[i].status = 0;\n            dispatch(updatePrinter(newListPrinters));\n          }\n\n          i++;\n        }\n      }\n    });\n  }\n\n  registerForPushNotificationsAsync = function registerForPushNotificationsAsync() {\n    var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status, token;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context4.next = 22;\n              break;\n            }\n\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n          case 3:\n            _await$Permissions$ge = _context4.sent;\n            existingStatus = _await$Permissions$ge.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== 'granted')) {\n              _context4.next = 12;\n              break;\n            }\n\n            _context4.next = 9;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n          case 9:\n            _await$Permissions$as = _context4.sent;\n            status = _await$Permissions$as.status;\n            finalStatus = status;\n\n          case 12:\n            if (!(finalStatus !== 'granted')) {\n              _context4.next = 15;\n              break;\n            }\n\n            alert('Failed to get push token for push notification!');\n            return _context4.abrupt(\"return\");\n\n          case 15:\n            _context4.next = 17;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 17:\n            token = _context4.sent;\n            console.log(token);\n\n            _this.setState({\n              expoPushToken: token\n            });\n\n            _context4.next = 23;\n            break;\n\n          case 22:\n            alert('Must use physical device for Push Notifications');\n\n          case 23:\n            if (Platform.OS === 'android') {\n              Notifications.createChannelAndroidAsync('default', {\n                name: 'default',\n                sound: true,\n                priority: 'max',\n                vibrate: [0, 250, 250, 250]\n              });\n            }\n\n          case 24:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  setInterval(offlineDetection, 1000);\n  return listPrinters.map(function (printer) {\n    return React.createElement(TouchableOpacity, {\n      key: printer.id,\n      style: styles.touchable,\n      onPress: function onPress() {\n        return navigation.navigate('Detail Screen', {\n          printer: printer,\n          images: images\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 7\n      }\n    }, React.createElement(CardView, {\n      printer: printer,\n      images: images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }\n    }));\n  });\n}\n\nfunction HomeScreen(_ref3) {\n  var navigation = _ref3.navigation;\n  store.subscribe(function () {\n    return console.log(store.getState());\n  });\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'rgb(21, 34, 56)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }\n  }, React.createElement(RenderButtons, {\n    navigation: navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar Stack = createStackNavigator();\n\nfunction App(_ref4) {\n  var navigation = _ref4.navigation;\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }\n  }, React.createElement(Stack.Navigator, {\n    initialRouteName: \"Home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Printers\",\n    component: HomeScreen,\n    options: function options(_ref5) {\n      var navigation = _ref5.navigation;\n      return {\n        title: 'Printers',\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: windowWidth > 375 ? 110 : 85,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n          fontSize: 30,\n          marginTop: 30\n        },\n        headerTitleAlign: \"left\",\n        headerRight: function headerRight() {\n          return React.createElement(Button, {\n            onPress: function onPress() {\n              return navigation.navigate('Settings');\n            },\n            title: \"Settings\",\n            color: \"#7CFC00\",\n            marginRight: 20,\n            marginTop: 20,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }\n          });\n        }\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Detail Screen\",\n    component: DetailsScreen,\n    options: function options(_ref6) {\n      var route = _ref6.route;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: windowWidth > 375 ? 110 : 85,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'normal'\n        },\n        headerTitleAlign: \"center\",\n        title: route.params.printer.name,\n        headerBackTitleVisible: false\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Settings\",\n    component: SettingsPage,\n    options: function options(_ref7) {\n      var route = _ref7.route;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: windowWidth > 375 ? 110 : 85,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'normal'\n        },\n        headerTitleAlign: \"center\",\n        headerBackTitleVisible: false\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default withAuthenticator(App);","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/App.js"],"names":["Amplify","Storage","config","Auth","configure","React","useEffect","useState","useReducer","NavigationContainer","createStackNavigator","TouchableOpacity","DetailsScreen","SettingsPage","withAuthenticator","CardView","FileSystem","Permissions","Notifications","Provider","useSelector","useDispatch","updatePrinter","store","API","graphqlOperation","printersByOwner","listPrints","YellowBox","ignoreWarnings","windowWidth","Dimensions","get","width","windowHeight","height","styles","StyleSheet","create","view","position","backgroundColor","image","paddingTop","paddingBottom","marginTop","shadowColor","borderRadius","touchable","alignItems","justifyContent","printerNameText","fontSize","textAlign","color","bottom","left","marginLeft","marginBottom","printerStatusText","right","marginRight","cardCompletionViewStyle","Math","round","borderColor","borderWidth","calculateTimeExpired","printer","currentTime","Date","printerUpdated","updatedAt","diff","abs","expiredTime","RenderButtons","navigation","images","setImages","listPrinters","state","dispatch","printerImageDict","fetchPrinters","tempListPrinters","nextToken","currentUserInfo","user","graphql","owner","username","printerData","printers","data","items","newNextToken","concat","checkForSavedData","length","retrieveFromStorage","downloadAllImages","console","log","addToDict","key","value","save","saveImage","Object","keys","downloadImage","picture","level","customPrefix","public","then","result","id","catch","err","i","url","fileName","downloadAsync","documentDirectory","uri","error","returnValue","path","getInfoAsync","exists","deleteSavedData","deleteAsync","offlineDetection","forEach","printerState","status","timeExpired","newListPrinters","registerForPushNotificationsAsync","Constants","isDevice","getAsync","NOTIFICATIONS","existingStatus","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","setState","expoPushToken","Platform","OS","createChannelAndroidAsync","name","sound","priority","vibrate","setInterval","map","navigate","HomeScreen","subscribe","getState","flex","Stack","App","title","headerStyle","headerTintColor","headerTitleStyle","fontWeight","headerTitleAlign","headerRight","route","params","headerBackTitleVisible"],"mappings":"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","sourcesContent":["import Amplify, { Storage } from 'aws-amplify'\nimport config from './aws-exports'\nimport { Auth } from 'aws-amplify';\nAmplify.configure(config)\nimport 'react-native-gesture-handler';\nimport * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react'\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { DetailsScreen } from './DetailScreen.js';\nimport { SettingsPage } from './SettingsPage.js';\nimport { withAuthenticator } from 'aws-amplify-react-native'\nimport { CardView } from './CardView.js';\nimport * as FileSystem from 'expo-file-system';\nimport * as Permissions from 'expo-permissions';\nimport * as Notifications from 'expo-notifications';\nimport { Provider } from 'react-redux'; \nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from './actions/updatePrinters.js';\nimport store from './store.js';\n\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { printersByOwner, listPrints } from './graphql/queries'\n\nimport { YellowBox } from 'react-native';\n\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst styles = StyleSheet.create({\n  view: \n  {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  },\n  image: \n  {\n    width: windowWidth - 30,\n    height: windowHeight / 4,\n    paddingTop: '2%',\n    paddingBottom: '2%',\n    marginTop: 25,\n    shadowColor: 'transparent',\n    borderRadius:10\n  },\n  touchable:\n  {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor:'rgb(21, 34, 56)'\n  },\n  printerNameText: \n  {\n    fontSize: 200,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    left:0,\n    position: 'absolute',\n    marginLeft: 10,\n    marginBottom: 7\n  },\n  printerStatusText: \n  {\n    fontSize: 15,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    right:0,\n    position: 'absolute',\n    marginRight: 10,\n    marginBottom: 10\n  },\n  cardCompletionViewStyle:\n  {\n    borderRadius: Math.round(windowWidth + windowHeight) / 2,\n    width: windowWidth / (windowWidth/125),\n    height: windowWidth / (windowWidth/125),\n    borderColor: 'rgba(255, 255, 255, .3)', \n    borderWidth: 5,\n    alignItems: 'center',\n    position: 'absolute',\n    right: 0,\n    marginRight: 10,\n    marginTop: (windowHeight/60)\n  },\n})\n\n//Calculates if the printer has expired\nfunction calculateTimeExpired(printer)\n{\n  let currentTime = new Date()\n  let printerUpdated = new Date(printer.updatedAt)\n  let diff = Math.abs(currentTime - printerUpdated) / 1000;\n  let expiredTime = diff > (5 * 60)\n  return expiredTime\n}\n\nfunction RenderButtons({ navigation })\n{\n  const [images, setImages] = useState([])\n\n  const listPrinters = useSelector(state => { return state })\n  const dispatch = useDispatch()\n\n  var printerImageDict = {};\n\n  useEffect(() => \n  {\n    fetchPrinters()\n  }, [])\n\n  var tempListPrinters = []\n\n  //Fetches the printer data from the API\n  async function fetchPrinters(nextToken = null) \n  {\n    try\n    {\n      const user = await Auth.currentUserInfo();\n      const printerData = await API.graphql(graphqlOperation(printersByOwner, {owner: user.username, nextToken: nextToken}))\n      const printers = printerData.data.printersByOwner.items\n      \n      let newNextToken = printerData.data.printersByOwner.nextToken\n      \n      tempListPrinters = tempListPrinters.concat(printers)\n\n      if (newNextToken != null)\n      {\n        fetchPrinters(newNextToken)\n      }else \n      {\n        dispatch(updatePrinter(tempListPrinters))\n        //deleteSavedData()\n        let data = await checkForSavedData()\n        if (data.length !== 0)\n        {\n          retrieveFromStorage()\n        }else \n        {\n          downloadAllImages()\n        }\n        //Other stuff that comes later\n      }\n    } catch (err) { console.log(err) }\n  }\n\n  //Adds the printer to the image dictionary\n  function addToDict(key, value, save)\n  {\n    printerImageDict[key] = value\n    if (save)\n    {\n      saveImage(value, key + '.jpg')\n    }\n    if (Object.keys(printerImageDict).length == tempListPrinters.length)\n    {\n      setImages(printerImageDict)\n    }\n  }\n\n  //Gets the s3Image url\n  function downloadImage(printer)\n  {\n    Storage.get(printer.picture.key, { level: 'public', customPrefix: { public: ''} })\n      .then(result => addToDict(printer.id, result, true))\n      .catch(err => console.log(err));\n  }\n\n  //Downloads all images\n  function downloadAllImages()\n  {\n    for (i = 0; i < tempListPrinters.length; i++)\n    {\n      downloadImage(tempListPrinters[i])\n    }\n  }\n\n  //saves new data\n  function saveImage(url, fileName)\n  {\n    FileSystem.downloadAsync(url, FileSystem.documentDirectory + fileName)//printerID.jpg\n      .then(({ uri }) => \n      {\n        console.log('Finished downloading to ', uri);\n      })\n      .catch(error => \n      {\n        console.error(error);\n      });\n  }\n  \n  //checks if data has already been saved\n  async function checkForSavedData()\n  {\n    var returnValue = []\n    for (i = 0; i < tempListPrinters.length; i++)\n    {\n      let path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg'\n      let data = await FileSystem.getInfoAsync(path)\n      if (data.exists)\n      {\n        returnValue = returnValue.concat(path)\n      }\n    }\n    return returnValue\n  }\n\n  //clears all saved data\n  async function deleteSavedData()\n  {\n    let data = await checkForSavedData()\n    console.log('data thing ', data)\n    for (i = 0; i < data.length; i++)\n    {\n      await FileSystem.deleteAsync(data[i])\n      console.log('deleted')\n    }\n  }\n\n  //retrieves all saved\n  function retrieveFromStorage()\n  {\n    for (i = 0; i < tempListPrinters.length; i++)\n    {\n      let path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg'\n\n      addToDict(tempListPrinters[i].id, path, false)\n    }\n  }\n\n  //Detects if the printer has been disconnected\n  function offlineDetection()\n  {\n    let i = 0\n    listPrinters.forEach(function (printer) \n    {\n      if (printer.printerState != null)\n      {\n        if (printer.printerState.status != 0)\n        {\n          let timeExpired = calculateTimeExpired(printer)\n          \n          if (timeExpired)\n          {\n            var newListPrinters = [...listPrinters]\n            \n            newListPrinters[i].status = 0\n            //setPrinters(newListPrinters)\n            dispatch(updatePrinter(newListPrinters))\n          }\n          i++\n        }\n      }\n    })\n  }\n  \n  registerForPushNotificationsAsync = async () => \n  {\n    if (Constants.isDevice) \n    {\n      const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') \n      {\n        const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') \n      {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      const token = await Notifications.getExpoPushTokenAsync();\n      console.log(token);\n      this.setState({ expoPushToken: token });\n    } else \n    {\n      alert('Must use physical device for Push Notifications');\n    }\n  \n    if (Platform.OS === 'android') \n    {\n      Notifications.createChannelAndroidAsync('default', \n      {\n        name: 'default',\n        sound: true,\n        priority: 'max',\n        vibrate: [0, 250, 250, 250],\n      });\n    }\n  };\n\n  setInterval(offlineDetection, 1000)\n\n  return listPrinters.map((printer) => \n  {\n    return (\n      <TouchableOpacity key={printer.id} style={styles.touchable} onPress={ () => navigation.navigate('Detail Screen', { printer: printer, images: images })}>\n        <CardView printer={printer} images={images} />\n      </TouchableOpacity>\n    );\n  });\n}\n\nfunction HomeScreen({ navigation }) \n{\n  store.subscribe(() => console.log(store.getState()))\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor:'rgb(21, 34, 56)' }}>\n      <ScrollView>\n        <RenderButtons navigation={navigation}/>\n      </ScrollView>\n    </View>\n  );\n}\nconst Stack = createStackNavigator();\n\nfunction App({ navigation }) \n{\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen \n            name=\"Printers\" \n            component={HomeScreen}  \n            options={({ navigation }) => ({\n              title: 'Printers',\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height:(windowWidth > 375 ? 110 : 85),\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'bold',\n                fontSize:30,\n                marginTop:30\n              },\n              headerTitleAlign: \"left\",\n              headerRight: () => (\n                <Button\n                  onPress={() => navigation.navigate('Settings')}\n                  title=\"Settings\"\n                  color='#7CFC00'\n                  marginRight= {20}\n                  marginTop= {20}\n                />\n              ),\n            })}\n          />\n          <Stack.Screen \n            name=\"Detail Screen\" \n            component={DetailsScreen}\n            options={({ route }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height:(windowWidth > 375 ? 110 : 85),\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'normal',\n              },\n              headerTitleAlign: \"center\",\n              title: route.params.printer.name,\n              headerBackTitleVisible: false\n            })}\n            \n          />\n          <Stack.Screen \n            name=\"Settings\" \n            component={SettingsPage}\n            options={({ route }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height:(windowWidth > 375 ? 110 : 85),\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'normal',\n              },\n              headerTitleAlign: \"center\",\n              headerBackTitleVisible: false\n            })}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n\nexport default withAuthenticator(App);\n"]},"metadata":{},"sourceType":"module"}
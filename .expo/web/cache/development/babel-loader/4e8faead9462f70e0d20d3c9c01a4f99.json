{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/node_modules/react-native-custom-segmented-control/src/CustomSegmentedControl.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as _ from 'lodash';\nimport React, { Component } from 'react';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nvar NativeCustomSegmentedControl = requireNativeComponent('CustomSegmentedControl', null);\n\nvar CustomSegmentedControl = function (_Component) {\n  _inherits(CustomSegmentedControl, _Component);\n\n  var _super = _createSuper(CustomSegmentedControl);\n\n  function CustomSegmentedControl() {\n    _classCallCheck(this, CustomSegmentedControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CustomSegmentedControl, [{\n    key: \"render\",\n    value: function render() {\n      var transformedProps = _objectSpread({}, this.props);\n\n      _.update(transformedProps, 'segmentedStyle.segmentBackgroundColor', function (c) {\n        return processColor(c);\n      });\n\n      _.update(transformedProps, 'segmentedStyle.segmentTextColor', function (c) {\n        return processColor(c);\n      });\n\n      _.update(transformedProps, 'segmentedStyle.selectedLineColor', function (c) {\n        return processColor(c);\n      });\n\n      _.update(transformedProps, 'segmentedStyle.selectedTextColor', function (c) {\n        return processColor(c);\n      });\n\n      _.update(transformedProps, 'segmentedStyle.segmentHighlightTextColor', function (c) {\n        return processColor(c);\n      });\n\n      return React.createElement(NativeCustomSegmentedControl, _extends({}, transformedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 10\n        }\n      }));\n    }\n  }]);\n\n  return CustomSegmentedControl;\n}(Component);\n\nexport { CustomSegmentedControl as default };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/node_modules/react-native-custom-segmented-control/src/CustomSegmentedControl.js"],"names":["_","React","Component","requireNativeComponent","NativeCustomSegmentedControl","CustomSegmentedControl","transformedProps","props","update","c","processColor"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,CAAZ,MAAmB,QAAnB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;SAECC,sB;;AAID,IAAMC,4BAA4B,GAAGD,sBAAsB,CAAC,wBAAD,EAA2B,IAA3B,CAA3D;;IAEqBE,sB;;;;;;;;;;;;;6BACX;AACR,UAAMC,gBAAgB,qBAAO,KAAKC,KAAZ,CAAtB;;AACAP,MAAAA,CAAC,CAACQ,MAAF,CAASF,gBAAT,EAA2B,uCAA3B,EAAoE,UAACG,CAAD;AAAA,eAAOC,YAAY,CAACD,CAAD,CAAnB;AAAA,OAApE;;AACAT,MAAAA,CAAC,CAACQ,MAAF,CAASF,gBAAT,EAA2B,iCAA3B,EAA8D,UAACG,CAAD;AAAA,eAAOC,YAAY,CAACD,CAAD,CAAnB;AAAA,OAA9D;;AACAT,MAAAA,CAAC,CAACQ,MAAF,CAASF,gBAAT,EAA2B,kCAA3B,EAA+D,UAACG,CAAD;AAAA,eAAOC,YAAY,CAACD,CAAD,CAAnB;AAAA,OAA/D;;AACAT,MAAAA,CAAC,CAACQ,MAAF,CAASF,gBAAT,EAA2B,kCAA3B,EAA+D,UAACG,CAAD;AAAA,eAAOC,YAAY,CAACD,CAAD,CAAnB;AAAA,OAA/D;;AACAT,MAAAA,CAAC,CAACQ,MAAF,CAASF,gBAAT,EAA2B,0CAA3B,EAAuE,UAACG,CAAD;AAAA,eAAOC,YAAY,CAACD,CAAD,CAAnB;AAAA,OAAvE;;AACA,aAAO,oBAAC,4BAAD,eAAkCH,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACA;;;;EATkDJ,S;;SAA/BG,sB","sourcesContent":["import * as _ from 'lodash';\nimport React, {Component} from 'react';\nimport {\n\trequireNativeComponent,\n\tprocessColor\n} from 'react-native';\n\nconst NativeCustomSegmentedControl = requireNativeComponent('CustomSegmentedControl', null);\n\nexport default class CustomSegmentedControl extends Component {\n\trender() {\n\t\tconst transformedProps = {...this.props};\n\t\t_.update(transformedProps, 'segmentedStyle.segmentBackgroundColor', (c) => processColor(c));\n\t\t_.update(transformedProps, 'segmentedStyle.segmentTextColor', (c) => processColor(c));\n\t\t_.update(transformedProps, 'segmentedStyle.selectedLineColor', (c) => processColor(c));\n\t\t_.update(transformedProps, 'segmentedStyle.selectedTextColor', (c) => processColor(c));\n\t\t_.update(transformedProps, 'segmentedStyle.segmentHighlightTextColor', (c) => processColor(c));\n\t\treturn <NativeCustomSegmentedControl {...transformedProps}/>\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/DetailScreen.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { TemperatureView } from \"./TempView.js\";\nimport { CompletionView } from \"./CompletionView.js\";\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar test = 50 - (Math.round((windowWidth > 375 ? windowWidth : windowHeight) / 8) - 50);\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  },\n  image: {\n    width: windowWidth - 30,\n    height: windowHeight / 4,\n    paddingTop: '2%',\n    paddingBottom: '2%',\n    marginTop: 25,\n    shadowColor: 'transparent',\n    borderRadius: 10,\n    marginBottom: test,\n    marginTop: test\n  },\n  touchable: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgb(21, 34, 56)'\n  },\n  printerNameText: {\n    fontSize: 20,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    marginLeft: 10,\n    marginBottom: 10\n  },\n  printerStatusText: {\n    fontSize: 15,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    right: 0,\n    position: 'absolute',\n    marginRight: 10,\n    marginBottom: 10\n  },\n  background: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgb(21, 34, 56)'\n  },\n  completionViewStyle: {\n    borderRadius: Math.round(windowWidth + windowHeight) / 2,\n    width: windowWidth / 1.5,\n    height: windowWidth / 1.5,\n    borderColor: 'rgba(255, 255, 255, .3)',\n    borderWidth: 10,\n    alignItems: 'center',\n    marginBottom: test\n  }\n});\n\nfunction DetailsScreen(_ref) {\n  var route = _ref.route;\n  var printer = route.params.printer;\n  var images = route.params.images;\n  var headTemp = printer.printerState != null ? printer.printerState.temps.head.currentTemp : '--';\n  var bedTemp = printer.printerState != null ? printer.printerState.temps.bed.currentTemp : '--';\n  var src;\n\n  if (images[printer.id] == false || typeof images[printer.id] != \"string\") {\n    src = require(\"./LocalAssets/default4.png\");\n  } else {\n    src = {\n      uri: images[printer.id]\n    };\n  }\n\n  return React.createElement(View, {\n    style: styles.background,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, React.createElement(CompletionView, {\n    text: 'Completed',\n    style: styles.completionViewStyle,\n    fontSize: windowWidth / 6,\n    textPos: windowHeight / 8.5,\n    printer: printer,\n    isCardView: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), React.createElement(TemperatureView, {\n    headTemp: headTemp,\n    bedTemp: bedTemp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), React.createElement(Image, {\n    source: src,\n    defaultSource: require(\"./LocalAssets/default4.png\"),\n    loadingIndicatorSource: require(\"./LocalAssets/default4.png\"),\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport { DetailsScreen };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/DetailScreen.js"],"names":["React","TemperatureView","CompletionView","windowWidth","Dimensions","get","width","windowHeight","height","test","Math","round","styles","StyleSheet","create","view","position","backgroundColor","image","paddingTop","paddingBottom","marginTop","shadowColor","borderRadius","marginBottom","touchable","alignItems","justifyContent","printerNameText","fontSize","textAlign","color","bottom","left","marginLeft","printerStatusText","right","marginRight","background","flex","completionViewStyle","borderColor","borderWidth","DetailsScreen","route","printer","params","images","headTemp","printerState","temps","head","currentTemp","bedTemp","bed","src","id","require","uri"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport { TemperatureView } from './TempView.js';\nimport { CompletionView } from './CompletionView.js';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst test = (50 - (Math.round((windowWidth > 375 ? windowWidth : windowHeight) / 8) - 50))\n\nconst styles = StyleSheet.create({\n  view: \n  {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  },\n  image: \n  {\n    width: windowWidth - 30,\n    height: windowHeight / 4,\n    paddingTop: '2%',\n    paddingBottom: '2%',\n    marginTop: 25,\n    shadowColor: 'transparent',\n    borderRadius:10,\n    marginBottom: test,\n    marginTop: test\n  },\n  touchable:\n  {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor:'rgb(21, 34, 56)'\n  },\n  printerNameText: \n  {\n    fontSize: 20,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    left:0,\n    position: 'absolute',\n    marginLeft: 10,\n    marginBottom: 10\n  },\n  printerStatusText: \n  {\n    fontSize: 15,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    right:0,\n    position: 'absolute',\n    marginRight: 10,\n    marginBottom: 10\n  },\n  background:\n  {\n    flex: 1, \n    alignItems: 'center', \n    justifyContent: 'center', \n    backgroundColor:'rgb(21, 34, 56)'\n  },\n  completionViewStyle:\n  {\n    borderRadius: Math.round(windowWidth + windowHeight) / 2,\n    width: windowWidth / 1.5,\n    height: windowWidth / 1.5,\n    borderColor: 'rgba(255, 255, 255, .3)', \n    borderWidth: 10,\n    alignItems: 'center',\n    marginBottom: test,\n  },\n})\n\nfunction DetailsScreen({route})\n{\n  const { printer } = route.params;\n  const { images } = route.params\n  var headTemp = (printer.printerState != null ? printer.printerState.temps.head.currentTemp : '--')\n  var bedTemp = (printer.printerState != null ? printer.printerState.temps.bed.currentTemp : '--')\n\n  var src;\n  if (images[printer.id] == false || typeof(images[printer.id]) != \"string\"){\n    src = require('./LocalAssets/default4.png')\n  } else {\n    src = { uri: images[printer.id] }\n  }\n\n  return (\n    <View style={ styles.background }>\n      <CompletionView text={'Completed'} style={styles.completionViewStyle} fontSize={windowWidth / 6} textPos={windowHeight / 8.5} printer={printer} isCardView={false} />\n      <TemperatureView headTemp={headTemp} bedTemp={bedTemp}/>\n      <Image\n        source= { src }\n        defaultSource = { require(\"./LocalAssets/default4.png\") }\n        loadingIndicatorSource={require('./LocalAssets/default4.png')}\n        style={ styles.image }/>\n    </View>\n  );\n}\n\nexport {DetailsScreen};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/EditPrinterNameView.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useEffect, useState, useReducer } from 'react';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { useSelector, useDispatch } from 'react-redux';\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'rgb(21, 34, 56)',\n    height: windowHeight,\n    width: windowWidth,\n    alignItems: 'center'\n  },\n  textInput: {\n    height: 50,\n    width: windowWidth - 30,\n    backgroundColor: 'rgb(35, 57, 109)',\n    borderRadius: 10,\n    padding: '3%',\n    color: 'white',\n    fontSize: 15\n  },\n  button: {\n    color: 'white',\n    width: (windowWidth - 30) / 2.5,\n    height: 40,\n    marginTop: 40,\n    backgroundColor: 'rgb(32, 51, 84)',\n    borderRadius: 10,\n    alignItems: 'center'\n  }\n});\n\nfunction EditPrinterNameView() {\n  var _useState = useState('Printer Name'),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      _onChangeText = _useState2[1];\n\n  var temp;\n  var listPrinters = useSelector(function (state) {\n    temp = _toConsumableArray(state.listP);\n    return state.listP;\n  });\n  var dispatch = useDispatch();\n\n  function findPrinter() {\n    var returnValue;\n\n    for (i = 0; i < temp.length; i++) {\n      if (temp[i].id == printer.id) {\n        returnValue = i;\n        break;\n      }\n    }\n\n    return returnValue;\n  }\n\n  function updateName(newName) {\n    var printerArray = _toConsumableArray(listPrinters);\n\n    var i = findPrinter();\n\n    if (checkForSameName(newName, printerArray[i].id)) {\n      if (newName.length <= 20) {\n        printerArray[i].name = newName;\n        dispatch(updatePrinter(printerArray));\n        printer.toggleBack();\n      }\n    }\n  }\n\n  function passesChecks(newName, printerID) {\n    var returnVal = false;\n\n    for (i = 0; i < listPrinters.length; i++) {\n      if (newName == listPrinters[i].name && printerID != listPrinters[i].id) {\n        returnVal = true;\n        break;\n      }\n    }\n\n    return returnVal;\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: styles.textInput,\n    onChangeText: function onChangeText(text) {\n      return _onChangeText(text);\n    },\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      return passesChecks(value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white',\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, \"Update Name\")));\n}\n\nexport { EditPrinterNameView };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/EditPrinterNameView.js"],"names":["React","useEffect","useState","useReducer","TouchableOpacity","useSelector","useDispatch","windowWidth","Dimensions","get","width","windowHeight","height","styles","StyleSheet","create","container","backgroundColor","alignItems","textInput","borderRadius","padding","color","fontSize","button","marginTop","EditPrinterNameView","value","onChangeText","temp","listPrinters","state","listP","dispatch","findPrinter","returnValue","i","length","id","printer","updateName","newName","printerArray","checkForSameName","name","updatePrinter","toggleBack","passesChecks","printerID","returnVal","text"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground, Switch, TextInput } from 'react-native';\nimport { useEffect, useState, useReducer } from 'react'\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst styles = StyleSheet.create({\n    container: \n    {\n        backgroundColor: 'rgb(21, 34, 56)',\n        height: windowHeight,\n        width: windowWidth,\n        alignItems: 'center'\n    },\n    textInput: \n    {\n        height: 50, //to be determined,\n        width: windowWidth - 30,\n        backgroundColor: 'rgb(35, 57, 109)',\n        borderRadius: 10,\n        padding: '3%',\n        color: 'white',\n        fontSize: 15\n    },\n    button:\n    {\n        color: 'white',\n        width: (windowWidth - 30) / 2.5,\n        height: 40,\n        marginTop: 40,\n        backgroundColor: 'rgb(32, 51, 84)',\n        borderRadius: 10,\n        alignItems: 'center',\n    }\n})\n\nfunction EditPrinterNameView()\n{\n    const [value, onChangeText] = useState('Printer Name');\n\n    var temp;\n    const listPrinters = useSelector(state => { temp = [...state.listP] ; return state.listP })\n    const dispatch = useDispatch()\n\n    //Returns the index of the printer that was passed in\n    function findPrinter()\n    {\n        var returnValue;\n        \n        for (i = 0; i < temp.length; i++)\n        {\n        if (temp[i].id == printer.id)\n        {\n            returnValue = i\n            break\n        }\n        }\n        return returnValue\n    }\n\n    //Updates the global state of a certain printer\n    function updateName(newName)\n    {\n        \n\n        var printerArray = [...listPrinters]\n        let i = findPrinter()\n\n        if (checkForSameName(newName, printerArray[i].id))\n        {\n            if (newName.length <= 20)\n            {\n                printerArray[i].name = newName\n\n                dispatch(updatePrinter(printerArray))\n                printer.toggleBack()\n            }\n        }\n    }\n\n    function passesChecks(newName, printerID)\n    {\n        var returnVal = false;\n\n        for (i = 0; i < listPrinters.length; i++)\n        {\n            if ((newName == listPrinters[i].name) && (printerID != listPrinters[i].id))\n            {\n                returnVal = true\n                break\n            }\n        }\n\n        return returnVal\n    }\n\n    return(\n        <View style={ styles.container }>\n            <TextInput\n                style={ styles.textInput }\n                onChangeText={text => onChangeText(text)}\n                value={value}\n            />\n            <TouchableOpacity style={styles.button} onPress={() => passesChecks(value)}>\n                <Text style={{ color: 'white', marginTop: 10 }}>Update Name</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nexport { EditPrinterNameView };"]},"metadata":{},"sourceType":"module"}
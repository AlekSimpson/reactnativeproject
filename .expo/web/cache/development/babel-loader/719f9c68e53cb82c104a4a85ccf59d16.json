{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/ActionSheet.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { Divider } from \"./Divider.js\";\nimport { ActionSheetStyles as styles } from \"./Styles.js\";\nvar PRIMARY_COLOR = 'rgb(0,98,255)';\nvar WHITE = '#ffffff';\nvar BORDER_COLOR = '#DBDBDB';\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\n\nvar ActionSheet = function ActionSheet(props) {\n  var actionItems = props.actionItems;\n\n  var actionSheetItems = _toConsumableArray(actionItems);\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.centeredView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'column',\n      margin: 20,\n      backgroundColor: \"rgb(28, 46, 74)\",\n      borderRadius: 10,\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 2\n      },\n      shadowOpacity: 0.25,\n      shadowRadius: 3.84,\n      width: windowWidth - 20,\n      position: 'absolute',\n      bottom: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'gray',\n      fontSize: 15,\n      marginTop: 10,\n      marginLeft: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, props.title), React.createElement(Divider, {\n    width: windowWidth - 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }), actionSheetItems.map(function (actionItem, index) {\n    return React.createElement(TouchableOpacity, {\n      onPress: actionItem.onPress,\n      key: index,\n      style: {\n        flexDirection: 'row',\n        marginTop: 1,\n        marginBottom: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, actionItem.icon !== null && actionItem.icon, actionItem.label);\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return props.onCancel();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: 'rgb(32, 51, 84)',\n      borderRadius: 20,\n      width: windowWidth - 30,\n      height: windowHeight / 15,\n      marginBottom: 10,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      alignSelf: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.cancelButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, \"Close\"))))));\n};\n\nActionSheet.propTypes = {\n  actionItems: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    icon: PropTypes.any,\n    label: PropTypes.any,\n    onPress: PropTypes.func,\n    color: PropTypes.string\n  })).isRequired,\n  onCancel: PropTypes.func,\n  actionTextColor: PropTypes.string\n};\nActionSheet.defaultProps = {\n  actionItems: [],\n  onCancel: function onCancel() {},\n  actionTextColor: null\n};\nexport default ActionSheet;","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/ActionSheet.js"],"names":["PropTypes","React","TouchableOpacity","Divider","ActionSheetStyles","styles","PRIMARY_COLOR","WHITE","BORDER_COLOR","windowWidth","Dimensions","get","width","windowHeight","height","ActionSheet","props","actionItems","actionSheetItems","centeredView","flexDirection","margin","backgroundColor","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","position","bottom","color","fontSize","marginTop","marginLeft","title","map","actionItem","index","onPress","marginBottom","icon","label","onCancel","alignItems","justifyContent","alignSelf","cancelButton","propTypes","arrayOf","shape","id","oneOfType","number","string","any","func","isRequired","actionTextColor","defaultProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { StyleSheet, Text, TouchableHighlight, View, Dimensions } from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { Divider } from './Divider.js';\nimport { ActionSheetStyles as styles } from './Styles.js'\n\nconst PRIMARY_COLOR = 'rgb(0,98,255)';\nconst WHITE = '#ffffff';\nconst BORDER_COLOR = '#DBDBDB';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst ActionSheet = (props) => {\n  const { actionItems } = props;\n  \n  const actionSheetItems = [...actionItems]\n  \n  return (\n    <React.Fragment>\n      <View style={styles.centeredView}>\n        <View style={{\n            flexDirection: 'column',\n            margin: 20,\n            backgroundColor: \"rgb(28, 46, 74)\",\n            borderRadius: 10,\n            shadowColor: \"#000\",\n            shadowOffset: \n            {\n              width: 0,\n              height: 2\n            },\n            shadowOpacity: 0.25,\n            shadowRadius: 3.84,\n            width: windowWidth - 20,\n            position: 'absolute',\n            bottom: 0,\n          }}\n        >\n          <Text style={{ color: 'gray', fontSize: 15, marginTop: 10, marginLeft: 10 }}>{props.title}</Text>\n          <Divider width={windowWidth - 20}/>\n          {\n            actionSheetItems.map((actionItem, index) => {\n              return(\n                <TouchableOpacity onPress={actionItem.onPress} key={index} style={{ flexDirection: 'row', marginTop: 1, marginBottom: 1 }}>\n                  {(actionItem.icon !== null)&&\n                    actionItem.icon\n                  }\n                  {actionItem.label}\n                </TouchableOpacity>\n              )\n            })\n          }\n          <TouchableOpacity onPress={() => props.onCancel()}>\n            <View style={{ backgroundColor: 'rgb(32, 51, 84)', borderRadius: 20, width: windowWidth - 30, height: (windowHeight / 15), marginBottom: 10, flexDirection: 'row', alignItems: 'center', justifyContent: 'center' , alignSelf: 'center', }}>\n              <Text style={styles.cancelButton}>Close</Text>\n            </View>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </React.Fragment>\n  )\n}\n\nActionSheet.propTypes = {\n  actionItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      icon: PropTypes.any,\n      label: PropTypes.any,\n      onPress: PropTypes.func,\n      color: PropTypes.string\n    })\n  ).isRequired,\n  onCancel: PropTypes.func,\n  actionTextColor: PropTypes.string\n}\n\n\nActionSheet.defaultProps = {\n  actionItems: [],\n  onCancel: () => { },\n  actionTextColor: null\n}\n\n\nexport default ActionSheet;"]},"metadata":{},"sourceType":"module"}
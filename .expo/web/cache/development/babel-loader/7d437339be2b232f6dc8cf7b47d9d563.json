{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/DetailScreen.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { TemperatureView } from \"./TempView.js\";\nimport { CompletionView } from \"./CompletionView.js\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { LoadingCard } from \"./LoadingCardView.js\";\nimport { useEffect, useState } from 'react';\nimport { updatePrinter } from \"./updatePrinters.js\";\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar styles = StyleSheet.create({\n  image: {\n    width: windowWidth - 30,\n    height: windowHeight / 3.5,\n    paddingTop: '2%',\n    paddingBottom: '2%',\n    marginTop: 25,\n    shadowColor: 'transparent',\n    borderRadius: 10,\n    marginBottom: 25,\n    position: 'absolute',\n    bottom: 0\n  },\n  background: {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgb(21, 34, 56)'\n  }\n});\n\nfunction DetailsScreen(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showImage = _useState2[0],\n      setImage = _useState2[1];\n\n  var printer = route.params.printer;\n  var images = useSelector(function (state) {\n    return state.imageDict;\n  });\n  var listPrinters = useSelector(function (state) {\n    return state.listP;\n  });\n  var dispatch = useDispatch();\n  var headTemp = printer.printerState != null ? printer.printerState.temps.head.currentTemp : '--';\n  var bedTemp = printer.printerState != null ? printer.printerState.temps.bed.currentTemp : '--';\n  var percentFinished = 0;\n\n  if (printer.printerState != null) {\n    if (printer.printerState.progress != null) {\n      percentFinished = Math.round(printer.printerState.progress * 100);\n    }\n  }\n\n  var loadingStyle = {\n    marginBottom: 25,\n    position: 'absolute',\n    bottom: 0\n  };\n  var temp;\n\n  function findPrinter() {\n    var returnValue;\n\n    for (i = 0; i < temp.length; i++) {\n      if (temp[i].id == printer.id) {\n        returnValue = i;\n        break;\n      }\n    }\n\n    return returnValue;\n  }\n\n  function updateStatus(newStatus) {\n    temp = _toConsumableArray(listPrinters);\n    var i = findPrinter();\n    temp[i].status = newStatus;\n    dispatch(updatePrinter(temp));\n  }\n\n  function handleChange() {\n    setImage(true);\n  }\n\n  useEffect(function () {\n    setTimeout(handleChange, 500);\n  }, []);\n  return React.createElement(View, {\n    style: styles.background,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, React.createElement(CompletionView, {\n    text: 'Completed',\n    viewType: \"detail\",\n    fontSize: windowWidth / 6,\n    textPos: windowHeight / 8.5,\n    printer: printer,\n    isCardView: false,\n    percent: percentFinished,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), React.createElement(TemperatureView, {\n    headTemp: headTemp,\n    bedTemp: bedTemp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), !showImage && React.createElement(LoadingCard, {\n    showAnimation: false,\n    showBanner: false,\n    extraStyle: loadingStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), showImage && React.createElement(Image, {\n    source: {\n      uri: images[printer.id]\n    },\n    defaultSource: require(\"./LocalAssets/default4.png\"),\n    loadingIndicatorSource: require(\"./LocalAssets/default4.png\"),\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport { DetailsScreen };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/DetailScreen.js"],"names":["React","TemperatureView","CompletionView","useSelector","useDispatch","LoadingCard","useEffect","useState","updatePrinter","windowWidth","Dimensions","get","width","windowHeight","height","styles","StyleSheet","create","image","paddingTop","paddingBottom","marginTop","shadowColor","borderRadius","marginBottom","position","bottom","background","flex","flexDirection","alignItems","justifyContent","backgroundColor","DetailsScreen","route","showImage","setImage","printer","params","images","state","imageDict","listPrinters","listP","dispatch","headTemp","printerState","temps","head","currentTemp","bedTemp","bed","percentFinished","progress","Math","round","loadingStyle","temp","findPrinter","returnValue","i","length","id","updateStatus","newStatus","status","handleChange","setTimeout","uri","require"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport { TemperatureView } from './TempView.js';\nimport { CompletionView } from './CompletionView.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { LoadingCard } from './LoadingCardView.js';\nimport { useEffect, useState } from 'react'\nimport { updatePrinter } from './updatePrinters.js';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst styles = StyleSheet.create({\n  image: \n  {\n    width: windowWidth - 30,\n    height: windowHeight / 3.5,\n    paddingTop: '2%',\n    paddingBottom: '2%',\n    marginTop: 25,//Math.round(windowHeight * 0.0149) * 2\n    shadowColor: 'transparent',\n    borderRadius:10,\n    marginBottom: 25,\n    position: 'absolute',\n    bottom: 0\n  },\n  background:\n  {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center', \n    justifyContent: 'center', \n    backgroundColor:'rgb(21, 34, 56)',\n  },\n})\n\nfunction DetailsScreen({route})\n{\n  const [showImage, setImage] = useState(false)\n  const { printer } = route.params;\n  const images = useSelector(state => { return state.imageDict })\n  const listPrinters = useSelector(state => { return state.listP }) // TEMP\n  const dispatch = useDispatch() // TEMP\n  var headTemp = (printer.printerState != null ? printer.printerState.temps.head.currentTemp : '--')\n  var bedTemp = (printer.printerState != null ? printer.printerState.temps.bed.currentTemp : '--')\n\n  var percentFinished = 0;\n\n  if (printer.printerState != null)\n  {\n    if (printer.printerState.progress != null)\n    {\n      percentFinished = Math.round(printer.printerState.progress * 100)\n    }\n  }\n\n  const loadingStyle = {\n    marginBottom: 25,\n    position: 'absolute',\n    bottom: 0\n  }\n  var temp; // TEMP\n\n  //Returns the index of the printer that was passed in TEMP\n  function findPrinter()\n  {\n    var returnValue;\n    \n    for (i = 0; i < temp.length; i++)\n    {\n      if (temp[i].id == printer.id)\n      {\n        returnValue = i\n        break\n      }\n    }\n    return returnValue\n  }\n  \n  //Updates the printer status to either pause or play TEMP\n  function updateStatus(newStatus)\n  {\n    temp = [...listPrinters]\n    let i = findPrinter()\n\n    temp[i].status = newStatus\n\n    dispatch(updatePrinter(temp))\n  }\n\n  function handleChange()\n  {\n    setImage(true)\n  }\n  \n  useEffect(() => \n  {\n    setTimeout(handleChange, 500)\n  }, [])\n\n  return (\n    <View style={ styles.background }>\n      <CompletionView text={'Completed'} viewType='detail' fontSize={windowWidth / 6} textPos={windowHeight / 8.5} printer={printer} isCardView={false} percent={percentFinished} />\n      <TemperatureView headTemp={headTemp} bedTemp={bedTemp}/>\n      {(!showImage)&&\n        <LoadingCard showAnimation={false}  showBanner={false} extraStyle={loadingStyle}/>\n      }\n      {(showImage)&&\n        <Image\n          source= {{ uri: images[printer.id] }}\n          defaultSource = { require(\"./LocalAssets/default4.png\") }\n          loadingIndicatorSource={require('./LocalAssets/default4.png')}\n          style={ styles.image }\n        />\n      }\n    </View>\n  );\n}\nexport {DetailsScreen};"]},"metadata":{},"sourceType":"module"}
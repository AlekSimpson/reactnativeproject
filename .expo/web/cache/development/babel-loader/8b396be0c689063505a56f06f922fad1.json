{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/App.js\";\nimport Amplify, { Storage } from 'aws-amplify';\nimport config from \"./aws-exports\";\nimport { Auth } from 'aws-amplify';\nAmplify.configure(config);\nimport 'react-native-gesture-handler';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { DetailsScreen } from \"./DetailScreen.js\";\nimport { SettingsPage } from \"./SettingsPage.js\";\nimport { withAuthenticator } from 'aws-amplify-react-native';\nimport { Provider } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from \"./updatePrinters.js\";\nimport store from \"./store.js\";\nimport { fetchPrinters } from \"./FetchPrinters.js\";\nimport { Ionicons as Icon } from '@expo/vector-icons';\nimport { darker, lighter } from \"./Colors.js\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport { updatePrinterDict } from \"./updatePrinterDict\";\nimport { EditPrinterView } from \"./EditPrinterView\";\nimport { EditPrinterNameView } from \"./EditPrinterNameView.js\";\nimport { LoadingCardsView } from \"./LoadingCardView\";\nimport { Feather } from '@expo/vector-icons';\nimport { MaterialCommunityIcons as MCI } from '@expo/vector-icons';\nimport ActionSheet from \"./ActionSheet.js\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Entypo } from '@expo/vector-icons';\nimport { RenderButtons } from \"./RenderButtons.js\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { CustomLogin } from \"./CustomLogin.js\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AppStyles as styles } from \"./Styles.js\";\nimport { SegmentedControl } from \"./SegmentedControl.js\";\nYellowBox.ignoreWarnings(['Non-serializable values were found in the navigation state']);\nYellowBox.ignoreWarnings(['Warning: isMounted(...) is deprecated', 'Module RCTImageLoader']);\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar isWeb = Platform.OS == 'web';\nvar deepLinking = {\n  prefixes: ['https://cogniprint.io', 'cogniprint://'],\n  config: {\n    Home: {\n      path: 'Home',\n      DetailScreen: {\n        path: 'DetailScreen',\n        params: {\n          printer: null\n        },\n        screens: {\n          PrinterSettings: {\n            path: 'PrinterSettings',\n            screens: {\n              EditPrinterNameView: {\n                path: 'EditPrinterNameView',\n                params: {\n                  printer: null\n                }\n              }\n            }\n          }\n        }\n      },\n      Settings: 'Settings'\n    }\n  }\n};\n\nfunction HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var images = useSelector(function (state) {\n    return state.imageDict;\n  });\n  var dispatch = useDispatch();\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showActionSheet = _useState4[0],\n      setAction = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sortMethod = _useState6[0],\n      setMethod = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      connection = _useState8[0],\n      setConnection = _useState8[1];\n\n  var sortButtonsDict = {\n    'Failure Risk': React.createElement(MCI, {\n      name: \"shield-alert\",\n      size: 20,\n      color: \"#7CFC00\",\n      style: {\n        marginRight: 6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }),\n    'Alphabetical Order': React.createElement(Feather, {\n      name: \"align-justify\",\n      size: 20,\n      color: \"#7CFC00\",\n      style: {\n        marginRight: 6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 28\n      }\n    })\n  };\n\n  function closeActionSheet() {\n    setAction(false);\n  }\n\n  var actionItems = [{\n    id: 1,\n    icon: React.createElement(MCI, {\n      name: \"shield-alert\",\n      size: 20,\n      color: sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray',\n      style: styles.actionSheetIconStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }),\n    label: React.createElement(Text, {\n      style: {\n        fontSize: 15,\n        marginTop: 10,\n        marginBottom: 10,\n        marginLeft: 10,\n        color: sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 14\n      }\n    }, \"Risk Failure\"),\n    onPress: function onPress() {\n      resortPrintersWith('Failure Risk');\n    },\n    color: sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray'\n  }, {\n    id: 2,\n    icon: React.createElement(Feather, {\n      name: \"align-justify\",\n      size: 24,\n      color: sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray',\n      style: styles.actionSheetIconStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }),\n    label: React.createElement(Text, {\n      style: {\n        fontSize: 15,\n        marginTop: 10,\n        marginBottom: 10,\n        marginLeft: 10,\n        color: sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 14\n      }\n    }, \"Alphabetical Order\"),\n    onPress: function onPress() {\n      resortPrintersWith('Alphabetical Order');\n    },\n    color: sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray'\n  }];\n  var sortItems = [{\n    id: 1,\n    icon: React.createElement(MCI, {\n      name: \"shield-alert\",\n      size: 20,\n      color: sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray',\n      style: styles.actionSheetIconStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }),\n    label: React.createElement(Text, {\n      style: [styles.segmentedText, {\n        color: sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 14\n      }\n    }, \"Failure Risk\"),\n    onPress: function onPress() {\n      return resortPrintersWith('Failure Risk');\n    },\n    style: [styles.segmentBox, {\n      backgroundColor: sortMethod == 'Failure Risk' ? lighter['five'] : 'clear'\n    }]\n  }, {\n    id: 2,\n    icon: React.createElement(Feather, {\n      name: \"align-justify\",\n      size: 24,\n      color: sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray',\n      style: styles.actionSheetIconStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }),\n    label: React.createElement(Text, {\n      style: [styles.segmentedText, {\n        color: sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 14\n      }\n    }, \"Alphabetical Order\"),\n    onPress: function onPress() {\n      return resortPrintersWith('Alphabetical Order');\n    },\n    style: [styles.segmentBox, {\n      backgroundColor: sortMethod == 'Alphabetical Order' ? lighter['five'] : 'clear'\n    }]\n  }];\n\n  function resortPrintersWith(method) {\n    setAction(false);\n    setMethod(method);\n    storeData('sortMethod', method).then(function () {\n      return _onRefresh(method, true);\n    });\n  }\n\n  var storeData = function storeData(key, value) {\n    return _regeneratorRuntime.async(function storeData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, value));\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('ERROR SAVING USER PREFERENCE: ', _context.t0);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  var getData = function getData(key) {\n    var value;\n    return _regeneratorRuntime.async(function getData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n          case 3:\n            value = _context2.sent;\n            console.log('THIS IS VALUE ', value);\n\n            if (value !== null) {\n              setMethod(value);\n              fetchPrinters(null, false, value);\n            } else {\n              storeData('sortMethod', 'Failure Risk');\n              setMethod('Failure Risk');\n              fetchPrinters(null, false, 'Failure Risk');\n            }\n\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('ERROR GETTING USER PREFERENCE: ', _context2.t0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  function _onRefresh() {\n    var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : sortMethod;\n    var isResort = arguments.length > 1 ? arguments[1] : undefined;\n    setRefreshing(true);\n    dispatch(updatePrinter([]));\n    dispatch(updatePrinterDict({}));\n    fetchPrinters(null, true, method, isResort).then(function () {\n      return setRefreshing(false);\n    });\n  }\n\n  useEffect(function () {\n    var unsubscribeIfNotWeb = function unsubscribeIfNotWeb() {\n      if (Platform.OS !== \"web\") {\n        var unsubscribe = NetInfo.addEventListener(function (state) {\n          setConnection(state.isInternetReachable);\n        });\n      }\n    };\n\n    console.log('this is the images length, ', Object.keys(images).length);\n    getData('sortMethod');\n    return function () {\n      if (Platform.OS !== \"web\") {\n        unsubscribeIfNotWeb();\n      }\n    };\n  }, []);\n\n  function SortControls() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }\n    }, !isWeb && React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return setAction(true);\n      },\n      style: {\n        flexDirection: 'row',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, sortButtonsDict[sortMethod], React.createElement(Text, {\n      style: {\n        fontSize: 15,\n        color: '#7CFC00'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }, sortMethod), React.createElement(Entypo, {\n      name: \"chevron-down\",\n      color: \"#7CFC00\",\n      size: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    })), isWeb && React.createElement(SegmentedControl, {\n      sortItems: sortItems,\n      background: styles.segmentedStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    }));\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: darker['five'],\n      paddingTop: 25\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 5\n    }\n  }, Object.keys(images).length > 0 && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: function onRefresh() {\n        return _onRefresh();\n      },\n      tintColor: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 15\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }, connection.isInternetReachable == false && React.createElement(View, {\n    style: {\n      width: windowWidth - 30,\n      height: Math.round(windowHeight * 0.0246),\n      backgroundColor: 'orange',\n      marginBottom: 5,\n      borderRadius: 5,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white',\n      fontSize: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }, \"Connecting...\")), React.createElement(SortControls, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }), React.createElement(RenderButtons, {\n    navigation: navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  })), !isWeb && React.createElement(Modal, {\n    visible: showActionSheet,\n    animationType: \"slide\",\n    transparent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }, React.createElement(ActionSheet, {\n    actionItems: actionItems,\n    onCancel: closeActionSheet,\n    title: \"SORT BY\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  }))), Object.keys(images).length == 0 && React.createElement(LoadingCardsView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }));\n}\n\nvar Stack = createStackNavigator();\n\nfunction App(_ref2) {\n  var navigation = _ref2.navigation;\n  var headerHeight = windowWidth > 700 ? 125 : windowHeight / 6.7;\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    linking: deepLinking,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }\n  }, React.createElement(Stack.Navigator, {\n    initialRouteName: \"Home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 9\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Printers\",\n    component: HomeScreen,\n    options: function options(_ref3) {\n      var navigation = _ref3.navigation;\n      return {\n        title: 'Printers',\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: headerHeight,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n          fontSize: 30,\n          marginTop: 30\n        },\n        headerTitleAlign: \"left\",\n        headerRight: function headerRight() {\n          return React.createElement(TouchableOpacity, {\n            onPress: function onPress() {\n              return navigation.navigate('Settings');\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }\n          }, React.createElement(Icon, {\n            name: \"ios-settings\",\n            size: 32,\n            color: \"#7CFC00\",\n            style: {\n              marginRight: 20,\n              marginTop: 20\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 19\n            }\n          }));\n        }\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Detail Screen\",\n    component: DetailsScreen,\n    options: function options(_ref4) {\n      var route = _ref4.route,\n          navigation = _ref4.navigation;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: headerHeight,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'normal'\n        },\n        headerTitleAlign: \"center\",\n        title: route.params.printer.name,\n        headerBackTitleVisible: false,\n        headerTintColor: '#7CFC00',\n        headerTitleStyle: {\n          color: 'white'\n        },\n        headerRight: function headerRight() {\n          return React.createElement(TouchableOpacity, {\n            onPress: function onPress() {\n              return navigation.navigate('Printer Settings', {\n                printer: route.params.printer\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }\n          }, React.createElement(MCI, {\n            name: \"pencil\",\n            size: 32,\n            color: \"#7CFC00\",\n            style: {\n              marginRight: 20,\n              marginTop: 10\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 19\n            }\n          }));\n        },\n        path: 'Detail Screen'\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Settings\",\n    component: SettingsPage,\n    options: function options(_ref5) {\n      var route = _ref5.route;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: headerHeight,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold'\n        },\n        headerTitleAlign: \"center\",\n        headerBackTitleVisible: false,\n        headerTintColor: '#7CFC00',\n        headerTitleStyle: {\n          color: 'white'\n        }\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Printer Settings\",\n    component: EditPrinterView,\n    options: function options(_ref6) {\n      var route = _ref6.route;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: headerHeight,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'normal'\n        },\n        headerTitleAlign: \"center\",\n        headerBackTitleVisible: false,\n        headerTintColor: '#7CFC00',\n        headerTitleStyle: {\n          color: 'white'\n        }\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Edit Printer Name\",\n    component: EditPrinterNameView,\n    options: function options(_ref7) {\n      var route = _ref7.route;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: headerHeight,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'normal'\n        },\n        headerTitleAlign: \"center\",\n        headerBackTitleVisible: false,\n        headerTintColor: '#7CFC00',\n        headerTitleStyle: {\n          color: 'white'\n        }\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default withAuthenticator(App, false, [React.createElement(CustomLogin, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 3\n  }\n})]);","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/App.js"],"names":["Amplify","Storage","config","Auth","configure","React","useEffect","useState","NavigationContainer","createStackNavigator","TouchableOpacity","DetailsScreen","SettingsPage","withAuthenticator","Provider","useSelector","useDispatch","updatePrinter","store","fetchPrinters","Ionicons","Icon","darker","lighter","updatePrinterDict","EditPrinterView","EditPrinterNameView","LoadingCardsView","Feather","MaterialCommunityIcons","MCI","ActionSheet","Entypo","RenderButtons","NetInfo","CustomLogin","AppStyles","styles","SegmentedControl","YellowBox","ignoreWarnings","windowWidth","Dimensions","get","width","windowHeight","height","isWeb","Platform","OS","deepLinking","prefixes","Home","path","DetailScreen","params","printer","screens","PrinterSettings","Settings","HomeScreen","navigation","refreshing","setRefreshing","images","state","imageDict","dispatch","showActionSheet","setAction","sortMethod","setMethod","connection","setConnection","sortButtonsDict","marginRight","closeActionSheet","actionItems","id","icon","actionSheetIconStyle","label","fontSize","marginTop","marginBottom","marginLeft","color","onPress","resortPrintersWith","sortItems","segmentedText","style","segmentBox","backgroundColor","method","storeData","then","onRefresh","key","value","AsyncStorage","setItem","console","log","getData","getItem","isResort","unsubscribeIfNotWeb","unsubscribe","addEventListener","isInternetReachable","Object","keys","length","SortControls","flexDirection","alignItems","segmentedStyle","flex","justifyContent","paddingTop","Math","round","borderRadius","Stack","App","headerHeight","title","headerStyle","shadowColor","headerTintColor","headerTitleStyle","fontWeight","headerTitleAlign","headerRight","navigate","route","name","headerBackTitleVisible"],"mappings":"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","sourcesContent":["import Amplify, { Storage } from 'aws-amplify'\nimport config from './aws-exports'\nimport { Auth } from 'aws-amplify';\nAmplify.configure(config)\nimport 'react-native-gesture-handler';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react'\nimport { View, ScrollView, Dimensions, RefreshControl, Text, Modal } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native'; //createAppContainer\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { DetailsScreen } from './DetailScreen.js';\nimport { SettingsPage } from './SettingsPage.js';\nimport { withAuthenticator } from 'aws-amplify-react-native'\nimport { Provider } from 'react-redux'; \nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from './updatePrinters.js';\nimport store from './store.js';\nimport { fetchPrinters } from './FetchPrinters.js';\nimport { Ionicons as Icon} from '@expo/vector-icons';\nimport { darker, lighter } from './Colors.js';\nimport { YellowBox } from 'react-native';\nimport { updatePrinterDict } from './updatePrinterDict';\nimport { EditPrinterView } from './EditPrinterView';\nimport { EditPrinterNameView } from './EditPrinterNameView.js';\nimport { LoadingCardsView } from './LoadingCardView';\nimport { Feather } from '@expo/vector-icons';\nimport { MaterialCommunityIcons as MCI } from '@expo/vector-icons';\nimport ActionSheet from './ActionSheet.js';\nimport { AsyncStorage } from \"react-native\";\nimport { Entypo } from '@expo/vector-icons';\nimport { RenderButtons } from './RenderButtons.js'\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { CustomLogin } from './CustomLogin.js';\nimport { Platform } from 'react-native'\nimport { AppStyles as styles } from './Styles.js';\nimport { SegmentedControl } from './SegmentedControl.js';\n\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\n\nYellowBox.ignoreWarnings([\n  'Warning: isMounted(...) is deprecated', 'Module RCTImageLoader'\n]);\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nvar isWeb = (Platform.OS == 'web')\n\nconst deepLinking = {\n  prefixes: ['https://cogniprint.io', 'cogniprint://'],\n  config: \n  {\n    Home: \n    {\n      path: 'Home',\n      DetailScreen: \n      {\n        path: 'DetailScreen',\n        params:\n        {\n          printer: null,\n        },\n        screens:\n        {\n          PrinterSettings: \n          {\n            path: 'PrinterSettings',\n            screens:\n            {\n              EditPrinterNameView: \n              {\n                path: 'EditPrinterNameView',\n                params:\n                {\n                  printer: null,\n                }\n              }\n            }\n          }\n        }\n      },\n      Settings: 'Settings',\n    }\n  },\n}\n\nfunction HomeScreen({ navigation }) \n{\n  const [refreshing, setRefreshing] = useState(false)\n  const images = useSelector(state => { return state.imageDict })\n  const dispatch = useDispatch()\n  const [showActionSheet, setAction] = useState(false)\n  const [sortMethod, setMethod] = useState('')\n  const [connection, setConnection] = useState(true)\n\n  let sortButtonsDict = { \n    'Failure Risk': <MCI name='shield-alert' size={20} color='#7CFC00' style={{ marginRight: 6 }}/>, \n    'Alphabetical Order' : <Feather name='align-justify' size={20} color='#7CFC00' style={{ marginRight: 6 }}/>  \n  }\n\n  function closeActionSheet()\n  {\n      setAction(false)\n  }\n\n  const actionItems = [\n    {\n      id: 1,\n      icon: <MCI name='shield-alert' size={20} color={(sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray')} style={ styles.actionSheetIconStyle }/>,\n      label: <Text style={{ fontSize: 15, marginTop: 10, marginBottom: 10, marginLeft: 10, color:(sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray') }}>Risk Failure</Text>,\n      onPress: () => {\n        resortPrintersWith('Failure Risk')\n      },\n      color: (sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray')\n    },\n    {\n      id: 2,\n      icon: <Feather name='align-justify' size={24} color={(sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray')} style={ styles.actionSheetIconStyle }/>,\n      label: <Text style={{ fontSize: 15, marginTop: 10, marginBottom: 10, marginLeft: 10, color: (sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray')}}>Alphabetical Order</Text>,\n      onPress: () => {\n        resortPrintersWith('Alphabetical Order')\n      },\n      color:(sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray')\n    },\n  ];\n\n  const sortItems = [\n    {\n      id: 1,\n      icon: <MCI name='shield-alert' size={20} color={(sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray')} style={ styles.actionSheetIconStyle }/>,\n      label: <Text style={[ styles.segmentedText, { color: (sortMethod == 'Failure Risk' ? '#7CFC00' : 'gray') } ]}>Failure Risk</Text>,\n      onPress: () => resortPrintersWith('Failure Risk'),\n      style: [ styles.segmentBox, { backgroundColor: (sortMethod == 'Failure Risk' ? lighter['five'] : 'clear') } ]\n    },\n    {\n      id: 2,\n      icon: <Feather name='align-justify' size={24} color={(sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray')} style={ styles.actionSheetIconStyle }/>,\n      label: <Text style={[ styles.segmentedText, { color: (sortMethod == 'Alphabetical Order' ? '#7CFC00' : 'gray') } ]}>Alphabetical Order</Text>,\n      onPress: () => resortPrintersWith('Alphabetical Order'),\n      style: [ styles.segmentBox, { backgroundColor: (sortMethod == 'Alphabetical Order' ? lighter['five'] : 'clear') } ]\n    }\n  ]\n\n  //Resorts the printers\n  function resortPrintersWith(method)\n  {\n    setAction(false)\n    setMethod(method)\n    storeData('sortMethod', method).then(() => onRefresh(method, true))\n  }\n\n  //saves user preference\n  const storeData = async (key, value) => \n  {\n      try \n      {\n          await AsyncStorage.setItem(key, value)\n      } catch(e) \n      {\n          // saving error\n          console.log('ERROR SAVING USER PREFERENCE: ', e)\n      }\n  }\n\n  //retrieves user preference\n  const getData = async (key) => \n  {\n      try \n      {\n          const value = await AsyncStorage.getItem(key)\n          console.log('THIS IS VALUE ', value)\n          if (value !== null) \n          {\n              // value previously stored\n              setMethod(value)\n              fetchPrinters(null, false, value)\n          }else\n          {\n            storeData('sortMethod', 'Failure Risk')\n            setMethod('Failure Risk')\n            fetchPrinters(null, false, 'Failure Risk')\n          }\n      } catch(e) \n      {\n          // error reading value\n          console.log('ERROR GETTING USER PREFERENCE: ', e)\n      }\n  }\n\n  //Refreshes the printers\n  function onRefresh(method = sortMethod, isResort)\n  {\n    setRefreshing(true)\n\n    dispatch(updatePrinter([]))\n    dispatch(updatePrinterDict({}))\n\n    fetchPrinters(null, true, method, isResort).then(() => setRefreshing(false))\n  }\n\n  useEffect(() => \n  {\n    const unsubscribeIfNotWeb = () =>\n    {\n      if (Platform.OS !== \"web\")\n      {\n        const unsubscribe = NetInfo.addEventListener(state => \n        {\n          setConnection(state.isInternetReachable)\n        })\n      }\n    }\n    \n    \n    console.log('this is the images length, ', Object.keys(images).length)\n    //Get the saved sort method and then load printers with that sort method\n    getData('sortMethod')\n\n    return () => \n    {\n      if (Platform.OS !== \"web\")\n      {\n        unsubscribeIfNotWeb()\n      }\n    }\n  }, [])\n\n  function SortControls()\n  {\n    return(\n      <React.Fragment>\n        {(!isWeb) &&\n          <TouchableOpacity onPress={() => setAction(true)} style={{ flexDirection: 'row', alignItems: 'center' }}>\n            {sortButtonsDict[sortMethod]}\n            <Text style={{ fontSize: 15, color: '#7CFC00' }}>{sortMethod}</Text>\n            <Entypo name='chevron-down' color='#7CFC00' size={20} />\n          </TouchableOpacity>\n        }\n        {(isWeb) &&\n          <SegmentedControl sortItems={sortItems} background={styles.segmentedStyle}/>\n        }\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: darker['five'], paddingTop: 25 }}>\n      {(Object.keys(images).length > 0) &&\n        <React.Fragment>\n          <ScrollView\n            refreshControl={\n              <RefreshControl refreshing={refreshing} onRefresh={() => onRefresh()} tintColor='white'/>\n            }\n          >\n            {(connection.isInternetReachable == false) &&\n              <View style={{ width: windowWidth - 30, height: Math.round(windowHeight * 0.0246), backgroundColor: 'orange', marginBottom: 5, borderRadius: 5, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'  }}>\n                <Text style={{ color: 'white', fontSize: 15 }}>Connecting...</Text>\n              </View>\n            }\n\n            <SortControls/>\n            \n            <RenderButtons navigation={navigation}/>\n          </ScrollView>\n          {(!isWeb) &&\n            <Modal\n              visible={showActionSheet}\n              animationType='slide'\n              transparent={true}\n            >\n              <ActionSheet\n                  actionItems={actionItems}\n                  onCancel={closeActionSheet}\n                  title='SORT BY'\n              />\n            </Modal>\n          }\n        </React.Fragment>\n      }\n      {(Object.keys(images).length == 0) &&\n        <LoadingCardsView/>\n      }\n    </View>\n  );\n}\n\n\n\nconst Stack = createStackNavigator();\n\nfunction App({ navigation }) \n{\n  var headerHeight = (windowWidth > 700 ? 125 : windowHeight/6.7)\n  /* IDEA: To get rid of that white screen caused by the linking on mobile, maybe have two seperate navigation containters and depending on the platform is uses either the web container or the app container */\n  return (\n    <Provider store={store}>\n      <NavigationContainer linking={deepLinking}>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen \n            name=\"Printers\" \n            component={HomeScreen}  \n            options={({ navigation }) => ({\n              title: 'Printers',\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height: headerHeight,\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'bold',\n                fontSize:30,\n                marginTop:30\n              },\n              headerTitleAlign: \"left\",\n              headerRight: () => (\n                <TouchableOpacity onPress={() => navigation.navigate('Settings')}>\n                  <Icon name='ios-settings' size={32} color='#7CFC00' style={{ marginRight: 20, marginTop: 20 }} />\n                </TouchableOpacity>\n              )\n            })}\n          />\n          <Stack.Screen \n            name=\"Detail Screen\" \n            component={DetailsScreen}\n            options={({ route, navigation }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height: headerHeight,\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'normal',\n              },\n              headerTitleAlign: \"center\",\n              title: route.params.printer.name,\n              headerBackTitleVisible: false,\n              headerTintColor: '#7CFC00',\n              headerTitleStyle: { color: 'white' },\n              headerRight: () => (\n                <TouchableOpacity onPress={() => navigation.navigate('Printer Settings', { printer: route.params.printer})}>\n                  <MCI name='pencil' size={32} color='#7CFC00' style={{ marginRight: 20, marginTop: 10 }} />\n                </TouchableOpacity>\n              ),\n              path: 'Detail Screen'\n            })}\n            \n          />\n          <Stack.Screen \n            name=\"Settings\" \n            component={SettingsPage}\n            options={({ route }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height: headerHeight,\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'bold',\n              },\n              headerTitleAlign: \"center\",\n              headerBackTitleVisible: false,\n              headerTintColor: '#7CFC00',\n              headerTitleStyle: { color: 'white' }\n            })}\n          />\n          <Stack.Screen\n            name=\"Printer Settings\" \n            component={EditPrinterView}\n            options={({ route }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height: headerHeight,\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'normal',\n              },\n              headerTitleAlign: \"center\",\n              headerBackTitleVisible: false,\n              headerTintColor: '#7CFC00',\n              headerTitleStyle: { color: 'white' },\n            })}\n          />\n          <Stack.Screen\n            name=\"Edit Printer Name\" \n            component={EditPrinterNameView}\n            options={({ route }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height: headerHeight,\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'normal',\n              },\n              headerTitleAlign: \"center\",\n              headerBackTitleVisible: false,\n              headerTintColor: '#7CFC00',\n              headerTitleStyle: { color: 'white' },\n            })}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n\nexport default withAuthenticator(App, false, [\n  <CustomLogin/>\n]);\n"]},"metadata":{},"sourceType":"module"}
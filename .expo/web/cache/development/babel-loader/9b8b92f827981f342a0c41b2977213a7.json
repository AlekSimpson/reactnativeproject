{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/EditPrinterNameView.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useEffect, useState, useReducer } from 'react';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from \"./updatePrinters.js\";\nimport { EditPrinterNameViewStyles as styles } from \"./Styles.js\";\n\nfunction EditPrinterNameView(props) {\n  var printer = props.route.params.printer;\n  var temp;\n  var listPrinters = useSelector(function (state) {\n    temp = _toConsumableArray(state.listP);\n    return state.listP;\n  });\n  var dispatch = useDispatch();\n\n  var _useState = useState(printer.name),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      _onChangeText = _useState2[1];\n\n  function findPrinter() {\n    var returnValue;\n\n    for (var i = 0; i < temp.length; i++) {\n      if (temp[i].id == printer.id) {\n        returnValue = i;\n        break;\n      }\n    }\n\n    return returnValue;\n  }\n\n  function updateName(newName) {\n    var printerArray = _toConsumableArray(listPrinters);\n\n    var i = findPrinter();\n\n    if (passesChecks(printerArray[i]), newName) {\n      if (newName.length <= 20) {\n        printerArray[i].name = newName;\n        dispatch(updatePrinter(printerArray));\n      }\n    }\n  }\n\n  function passesChecks(printer, newName) {\n    var returnVal = false;\n\n    for (var i = 0; i < listPrinters.length; i++) {\n      if (newName == listPrinters[i].name && printer.id != listPrinters[i].id) {\n        returnVal = true;\n        break;\n      }\n    }\n\n    return returnVal;\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: styles.textInput,\n    onChangeText: function onChangeText(text) {\n      return _onChangeText(text);\n    },\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      return updateName(value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white',\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, \"Update Name\")));\n}\n\nexport { EditPrinterNameView };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/EditPrinterNameView.js"],"names":["React","useEffect","useState","useReducer","TouchableOpacity","useSelector","useDispatch","updatePrinter","EditPrinterNameViewStyles","styles","EditPrinterNameView","props","printer","route","params","temp","listPrinters","state","listP","dispatch","name","value","onChangeText","findPrinter","returnValue","i","length","id","updateName","newName","printerArray","passesChecks","returnVal","container","textInput","text","button","color","marginTop"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground, Switch, TextInput } from 'react-native';\nimport { useEffect, useState, useReducer } from 'react'\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from './updatePrinters.js';\nimport { EditPrinterNameViewStyles as styles } from './Styles.js'\n\nfunction EditPrinterNameView(props)\n{\n    var printer = props.route.params.printer\n    var temp;\n    const listPrinters = useSelector(state => { temp = [...state.listP] ; return state.listP })\n    const dispatch = useDispatch()\n    const [value, onChangeText] = useState(printer.name);\n\n    //Returns the index of the printer that was passed in\n    function findPrinter()\n    {\n        var returnValue;\n        \n        for (var i = 0; i < temp.length; i++)\n        {\n            if (temp[i].id == printer.id)\n            {\n                returnValue = i\n                break\n            }\n        }\n        return returnValue\n    }\n\n    //Updates the global state of a certain printer\n    function updateName(newName)\n    {\n        var printerArray = [...listPrinters]\n        let i = findPrinter()\n\n        if (passesChecks(printerArray[i]), newName)\n        {\n            if (newName.length <= 20)\n            {\n                //console.log('THIS IS PRINTER ARRAY ', i)\n                printerArray[i].name = newName\n\n                dispatch(updatePrinter(printerArray))\n            }\n        }\n    }\n\n    //Checks to see if the name is not the same as another printer and is not to long\n    function passesChecks(printer, newName)\n    {\n        var returnVal = false;\n\n        for (var i = 0; i < listPrinters.length; i++)\n        {\n            if ((newName == listPrinters[i].name) && (printer.id != listPrinters[i].id))\n            {\n                returnVal = true\n                break\n            }\n        }\n\n        return returnVal\n    }\n\n    return(\n        <View style={ styles.container }>\n            <TextInput\n                style={ styles.textInput }\n                onChangeText={text => onChangeText(text)}\n                value={value}\n            />\n            <TouchableOpacity style={styles.button} onPress={() => updateName(value)}>\n                <Text style={{ color: 'white', marginTop: 10 }}>Update Name</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nexport { EditPrinterNameView };"]},"metadata":{},"sourceType":"module"}
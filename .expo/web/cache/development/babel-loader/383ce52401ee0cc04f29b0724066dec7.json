{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport * as FileSystem from 'expo-file-system';\nimport { Provider } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from \"./updatePrinters.js\";\nimport { updatePrinterDict } from \"./updatePrinterDict.js\";\nimport store from \"./store.js\";\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\nimport { printersByOwner, listPrints } from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nvar printerImageDict = {};\nvar tempListPrinters = [];\n\nfunction fetchPrinters() {\n  var nextToken,\n      refresh,\n      sortMethod,\n      sortPrintersBy,\n      user,\n      printerData,\n      printers,\n      newNextToken,\n      data,\n      subscription,\n      addToDict,\n      downloadImage,\n      downloadAllImages,\n      saveImage,\n      checkForSavedData,\n      retrieveFromStorage,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function fetchPrinters$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          retrieveFromStorage = function _retrieveFromStorage() {\n            for (i = 0; i < tempListPrinters.length; i++) {\n              var path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg';\n              addToDict(tempListPrinters[i].id, path, false);\n            }\n          };\n\n          checkForSavedData = function _checkForSavedData() {\n            var returnValue, path, _data;\n\n            return _regeneratorRuntime.async(function checkForSavedData$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    returnValue = [];\n                    i = 0;\n\n                  case 2:\n                    if (!(i < tempListPrinters.length)) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg';\n                    _context.next = 6;\n                    return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(path));\n\n                  case 6:\n                    _data = _context.sent;\n\n                    if (_data.exists) {\n                      returnValue = returnValue.concat(path);\n                    }\n\n                  case 8:\n                    i++;\n                    _context.next = 2;\n                    break;\n\n                  case 11:\n                    return _context.abrupt(\"return\", returnValue);\n\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          saveImage = function _saveImage(url, fileName) {\n            FileSystem.downloadAsync(url, FileSystem.documentDirectory + fileName).then(function (_ref) {\n              var uri = _ref.uri;\n              console.log('Finished downloading to ', uri);\n            }).catch(function (error) {\n              console.error(error);\n            });\n          };\n\n          downloadAllImages = function _downloadAllImages() {\n            for (i = 0; i < tempListPrinters.length; i++) {\n              downloadImage(tempListPrinters[i]);\n            }\n          };\n\n          downloadImage = function _downloadImage(printer) {\n            Storage.get(printer.picture.key, {\n              level: 'public',\n              customPrefix: {\n                public: ''\n              }\n            }).then(function (result) {\n              return addToDict(printer.id, result, true);\n            }).catch(function (err) {\n              return console.log(err);\n            });\n          };\n\n          addToDict = function _addToDict(key, value, save) {\n            printerImageDict[key] = value;\n\n            if (save) {\n              saveImage(value, key + '.jpg');\n            }\n\n            if (Object.keys(printerImageDict).length == tempListPrinters.length) {\n              store.dispatch(updatePrinterDict(printerImageDict));\n            }\n          };\n\n          sortPrintersBy = function _sortPrintersBy(method) {\n            switch (method) {\n              case 'Failure Risk':\n                tempListPrinters.sort(function (a, b) {\n                  return b.status - a.status;\n                });\n                tempListPrinters.sort(function (a, b) {\n                  var aPred = a.printerState != null && a.printerState.failure != null && a.printerState.failure.currentPred != null ? a.printerState.failure.currentPred : 0.0;\n                  var bPred = b.printerState != null && b.printerState.failure != null && b.printerState.failure.currentPred != null ? b.printerState.failure.currentPred : 0.0;\n                  return bPred - aPred;\n                });\n                break;\n\n              case 'Alphabetical Order':\n                tempListPrinters.sort(function (a, b) {\n                  var fa = a.name.toLowerCase(),\n                      fb = b.name.toLowerCase();\n\n                  if (fa < fb) {\n                    return -1;\n                  }\n\n                  if (fa > fb) {\n                    return 1;\n                  }\n\n                  return 0;\n                });\n                console.log('did finish sorting');\n                break;\n\n              default:\n                tempListPrinters.sort(function (a, b) {\n                  return b.status - a.status;\n                });\n                tempListPrinters.sort(function (a, b) {\n                  var aPred = a.printerState != null && a.printerState.failure != null && a.printerState.failure.currentPred != null ? a.printerState.failure.currentPred : 0.0;\n                  var bPred = b.printerState != null && b.printerState.failure != null && b.printerState.failure.currentPred != null ? b.printerState.failure.currentPred : 0.0;\n                  return bPred - aPred;\n                });\n            }\n          };\n\n          nextToken = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : null;\n          refresh = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : false;\n          sortMethod = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 'Alphabetical Order';\n          _context2.prev = 10;\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(Auth.currentUserInfo());\n\n        case 13:\n          user = _context2.sent;\n          _context2.next = 16;\n          return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(printersByOwner, {\n            owner: user.username,\n            nextToken: nextToken\n          })));\n\n        case 16:\n          printerData = _context2.sent;\n          printers = printerData.data.printersByOwner.items;\n          newNextToken = printerData.data.printersByOwner.nextToken;\n          tempListPrinters = tempListPrinters.concat(printers);\n\n          if (!(newNextToken != null)) {\n            _context2.next = 24;\n            break;\n          }\n\n          fetchPrinters(newNextToken);\n          _context2.next = 31;\n          break;\n\n        case 24:\n          sortPrintersBy(sortMethod);\n          store.dispatch(updatePrinter(tempListPrinters));\n          _context2.next = 28;\n          return _regeneratorRuntime.awrap(checkForSavedData());\n\n        case 28:\n          data = _context2.sent;\n\n          if (data.length !== 0 && !refresh) {\n            retrieveFromStorage();\n          } else {\n            downloadAllImages();\n          }\n\n          if (!refresh) {\n            subscription = API.graphql(graphqlOperation(subscriptions.onCreateTodo)).subscribe({\n              next: function next(todoData) {\n                return console.log(todoData);\n              }\n            });\n          }\n\n        case 31:\n          _context2.next = 36;\n          break;\n\n        case 33:\n          _context2.prev = 33;\n          _context2.t0 = _context2[\"catch\"](10);\n          console.log(_context2.t0);\n\n        case 36:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[10, 33]], Promise);\n}\n\nexport { fetchPrinters };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/FetchPrinters.js"],"names":["React","useEffect","useState","useReducer","FileSystem","Provider","useSelector","useDispatch","updatePrinter","updatePrinterDict","store","Auth","Amplify","API","graphqlOperation","printersByOwner","listPrints","subscriptions","printerImageDict","tempListPrinters","fetchPrinters","sortPrintersBy","addToDict","downloadImage","downloadAllImages","saveImage","checkForSavedData","retrieveFromStorage","i","length","path","documentDirectory","id","returnValue","getInfoAsync","data","exists","concat","url","fileName","downloadAsync","then","uri","console","log","catch","error","printer","Storage","get","picture","key","level","customPrefix","public","result","err","value","save","Object","keys","dispatch","method","sort","a","b","status","aPred","printerState","failure","currentPred","bPred","fa","name","toLowerCase","fb","nextToken","refresh","sortMethod","currentUserInfo","user","graphql","owner","username","printerData","printers","items","newNextToken","subscription","onCreateTodo","subscribe","next","todoData"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react'\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport * as FileSystem from 'expo-file-system';\nimport { Provider } from 'react-redux'; \nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from './updatePrinters.js';\nimport { updatePrinterDict } from './updatePrinterDict.js';\nimport store from './store.js';\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\nimport { printersByOwner, listPrints } from './graphql/queries'\nimport * as subscriptions from './graphql/subscriptions';\n\n\nvar printerImageDict = {};\n\nvar tempListPrinters = []\n\n//Fetches the printer data from the API\nasync function fetchPrinters(nextToken = null, refresh = false, sortMethod = 'Alphabetical Order') \n{\n    //Sorts the fetched printers\n    function sortPrintersBy(method)\n    {\n        switch (method)\n        {\n            case 'Failure Risk':\n                tempListPrinters.sort((a, b) => {\n                    return b.status - a.status;\n                })\n                tempListPrinters.sort((a, b) => {\n                    let aPred = ((a.printerState != null && a.printerState.failure != null && a.printerState.failure.currentPred != null) ? a.printerState.failure.currentPred : 0.0)\n                    let bPred = ((b.printerState != null && b.printerState.failure != null && b.printerState.failure.currentPred != null) ? b.printerState.failure.currentPred : 0.0)\n                    return bPred - aPred\n                })\n                break \n            case 'Alphabetical Order':\n                tempListPrinters.sort((a, b) => {\n                    let fa = a.name.toLowerCase(),\n                        fb = b.name.toLowerCase()\n                    \n                    if (fa < fb)\n                    {\n                        return -1\n                    }\n                    if (fa > fb)\n                    {\n                        return 1\n                    }\n\n                    return 0\n                })\n                console.log('did finish sorting')\n                break\n            default: \n                //sort by failure risk by default\n                tempListPrinters.sort((a, b) => {\n                    return b.status - a.status;\n                })\n                tempListPrinters.sort((a, b) => {\n                    let aPred = ((a.printerState != null && a.printerState.failure != null && a.printerState.failure.currentPred != null) ? a.printerState.failure.currentPred : 0.0)\n                    let bPred = ((b.printerState != null && b.printerState.failure != null && b.printerState.failure.currentPred != null) ? b.printerState.failure.currentPred : 0.0)\n                    return bPred - aPred\n                })\n        }\n    }\n\n    try\n    {\n        const user = await Auth.currentUserInfo();\n        const printerData = await API.graphql(graphqlOperation(printersByOwner, {owner: user.username, nextToken: nextToken}))\n        const printers = printerData.data.printersByOwner.items\n        \n        let newNextToken = printerData.data.printersByOwner.nextToken\n        \n        tempListPrinters = tempListPrinters.concat(printers)\n\n        if (newNextToken != null)\n        {\n            fetchPrinters(newNextToken)\n        }else \n        {\n            sortPrintersBy(sortMethod)\n            \n            store.dispatch(updatePrinter(tempListPrinters))\n            //deleteSavedData()\n            let data = await checkForSavedData()\n            if ((data.length !== 0) && (!refresh))\n            {\n                retrieveFromStorage()\n            }else \n            {\n                downloadAllImages()\n            }\n            if (!refresh)\n            {\n                // Subscribe to creation of Todo\n                const subscription = API.graphql(\n                    graphqlOperation(subscriptions.onCreateTodo)\n                ).subscribe({\n                    next: (todoData) => console.log(todoData)\n                });\n            }\n        }\n    } catch (err) { console.log(err) }\n\n    //Adds the printer to the image dictionary\n    function addToDict(key, value, save)\n    {\n        printerImageDict[key] = value\n        if (save)\n        {\n            saveImage(value, key + '.jpg')\n        }\n        if (Object.keys(printerImageDict).length == tempListPrinters.length)\n        {\n            store.dispatch(updatePrinterDict(printerImageDict))\n        }\n    }\n\n    //Gets the s3Image url\n    function downloadImage(printer)\n    {\n        Storage.get(printer.picture.key, { level: 'public', customPrefix: { public: ''} })\n            .then(result => addToDict(printer.id, result, true))\n            .catch(err => console.log(err));\n    }\n\n    //Downloads all images\n    function downloadAllImages()\n    {\n        for (i = 0; i < tempListPrinters.length; i++)\n        {\n            downloadImage(tempListPrinters[i])\n        }\n    }\n\n    //saves new data\n    function saveImage(url, fileName)\n    {\n        FileSystem.downloadAsync(url, FileSystem.documentDirectory + fileName)//printerID.jpg\n            .then(({ uri }) => \n            {\n                console.log('Finished downloading to ', uri);\n            })\n            .catch(error => \n            {\n                console.error(error);\n            });\n    }\n\n    //checks if data has already been saved\n    async function checkForSavedData()\n    {\n        var returnValue = []\n        for (i = 0; i < tempListPrinters.length; i++)\n        {\n            let path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg'\n            let data = await FileSystem.getInfoAsync(path)\n            if (data.exists)\n            {\n                returnValue = returnValue.concat(path)\n            }\n        }\n        return returnValue\n    }\n\n    //retrieves all saved\n    function retrieveFromStorage()\n    {\n        for (i = 0; i < tempListPrinters.length; i++)\n        {\n            let path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg'\n\n            addToDict(tempListPrinters[i].id, path, false)\n        }\n    }\n}\n\nexport { fetchPrinters };"]},"metadata":{},"sourceType":"module"}
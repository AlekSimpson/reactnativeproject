{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/App.js\";\nimport Amplify, { Storage } from 'aws-amplify';\nimport config from \"./aws-exports\";\nimport { Auth } from 'aws-amplify';\nAmplify.configure(config);\nimport 'react-native-gesture-handler';\nimport * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { DetailsScreen } from \"./DetailScreen.js\";\nimport { SettingsPage } from \"./SettingsPage.js\";\nimport { withAuthenticator } from 'aws-amplify-react-native';\nimport { CardView } from \"./CardView.js\";\nimport * as FileSystem from 'expo-file-system';\nimport * as Permissions from 'expo-permissions';\nimport * as Notifications from 'expo-notifications';\nimport { Provider } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from \"./updatePrinters.js\";\nimport store from \"./store.js\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nimport { fetchPrinters } from \"./FetchPrinters.js\";\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { printersByOwner, listPrints } from \"./graphql/queries\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport { updatePrinterDict } from \"./updatePrinterDict\";\nimport { EditPrinterView } from \"./EditPrinterView\";\nimport { EditPrinterNameView } from \"./EditPrinterNameView.js\";\nYellowBox.ignoreWarnings(['Non-serializable values were found in the navigation state']);\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  },\n  image: {\n    width: windowWidth - 30,\n    height: windowHeight / 4,\n    paddingTop: '2%',\n    paddingBottom: '2%',\n    marginTop: 25,\n    shadowColor: 'transparent',\n    borderRadius: 10\n  },\n  touchable: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgb(21, 34, 56)'\n  },\n  printerNameText: {\n    fontSize: 200,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    marginLeft: 10,\n    marginBottom: 7\n  },\n  printerStatusText: {\n    fontSize: 15,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    right: 0,\n    position: 'absolute',\n    marginRight: 10,\n    marginBottom: 10\n  },\n  cardCompletionViewStyle: {\n    borderRadius: Math.round(windowWidth + windowHeight) / 2,\n    width: windowWidth / (windowWidth / 125),\n    height: windowWidth / (windowWidth / 125),\n    borderColor: 'rgba(255, 255, 255, .3)',\n    borderWidth: 5,\n    alignItems: 'center',\n    position: 'absolute',\n    right: 0,\n    marginRight: 10,\n    marginTop: windowHeight / 60\n  }\n});\n\nfunction calculateTimeExpired(printer) {\n  var currentTime = new Date();\n  var printerUpdated = new Date(printer.updatedAt);\n  var diff = Math.abs(currentTime - printerUpdated) / 1000;\n  var expiredTime = diff > 5 * 60;\n  return expiredTime;\n}\n\nfunction RenderButtons(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n  var listPrinters = useSelector(function (state) {\n    return state.listP;\n  });\n  var images = useSelector(function (state) {\n    return state.imageDict;\n  });\n  var dispatch = useDispatch();\n  useEffect(function () {\n    fetchPrinters();\n  }, []);\n\n  function offlineDetection() {\n    var i = 0;\n    listPrinters.forEach(function (printer) {\n      if (printer.printerState != null) {\n        if (printer.printerState.status != 0) {\n          var timeExpired = calculateTimeExpired(printer);\n\n          if (timeExpired) {\n            var newListPrinters = _toConsumableArray(listPrinters);\n\n            newListPrinters[i].status = 0;\n            dispatch(updatePrinter(newListPrinters));\n          }\n\n          i++;\n        }\n      }\n    });\n  }\n\n  registerForPushNotificationsAsync = function registerForPushNotificationsAsync() {\n    var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status, token;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n          case 3:\n            _await$Permissions$ge = _context.sent;\n            existingStatus = _await$Permissions$ge.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== 'granted')) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n          case 9:\n            _await$Permissions$as = _context.sent;\n            status = _await$Permissions$as.status;\n            finalStatus = status;\n\n          case 12:\n            if (!(finalStatus !== 'granted')) {\n              _context.next = 15;\n              break;\n            }\n\n            alert('Failed to get push token for push notification!');\n            return _context.abrupt(\"return\");\n\n          case 15:\n            _context.next = 17;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 17:\n            token = _context.sent;\n            console.log(token);\n\n            _this.setState({\n              expoPushToken: token\n            });\n\n            _context.next = 23;\n            break;\n\n          case 22:\n            alert('Must use physical device for Push Notifications');\n\n          case 23:\n            if (Platform.OS === 'android') {\n              Notifications.createChannelAndroidAsync('default', {\n                name: 'default',\n                sound: true,\n                priority: 'max',\n                vibrate: [0, 250, 250, 250]\n              });\n            }\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  setInterval(offlineDetection, 1000);\n  return listPrinters.map(function (printer) {\n    return React.createElement(TouchableOpacity, {\n      key: printer.id,\n      style: styles.touchable,\n      onPress: function onPress() {\n        return navigation.navigate('Detail Screen', {\n          printer: printer,\n          images: images\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }, React.createElement(CardView, {\n      printer: printer,\n      images: images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }));\n  });\n}\n\nfunction HomeScreen(_ref2) {\n  var navigation = _ref2.navigation;\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'rgb(21, 34, 56)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, React.createElement(RenderButtons, {\n    navigation: navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar Stack = createStackNavigator();\n\nfunction App(_ref3) {\n  var navigation = _ref3.navigation;\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, React.createElement(Stack.Navigator, {\n    initialRouteName: \"Home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Printers\",\n    component: HomeScreen,\n    options: function options(_ref4) {\n      var navigation = _ref4.navigation;\n      return {\n        title: 'Printers',\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: windowWidth > 375 ? 110 : 85,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n          fontSize: 30,\n          marginTop: 30\n        },\n        headerTitleAlign: \"left\",\n        headerRight: function headerRight() {\n          return React.createElement(Button, {\n            onPress: function onPress() {\n              return navigation.navigate('Settings');\n            },\n            title: \"Settings\",\n            color: \"#7CFC00\",\n            marginRight: 20,\n            marginTop: 20,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }\n          });\n        }\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Detail Screen\",\n    component: DetailsScreen,\n    options: function options(_ref5) {\n      var route = _ref5.route,\n          navigation = _ref5.navigation;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: windowWidth > 375 ? 110 : 85,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'normal'\n        },\n        headerTitleAlign: \"center\",\n        title: route.params.printer.name,\n        headerBackTitleVisible: false,\n        headerRight: function headerRight() {\n          return React.createElement(Button, {\n            onPress: function onPress() {\n              return navigation.navigate('Printer Settings', {\n                printer: route.params.printer\n              });\n            },\n            title: \"Edit\",\n            color: \"#7CFC00\",\n            marginRight: 20,\n            marginTop: 20,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }\n          });\n        }\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Settings\",\n    component: SettingsPage,\n    options: function options(_ref6) {\n      var route = _ref6.route;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: windowWidth > 375 ? 110 : 85,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'normal'\n        },\n        headerTitleAlign: \"center\",\n        headerBackTitleVisible: false\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Printer Settings\",\n    component: EditPrinterView,\n    options: function options(_ref7) {\n      var route = _ref7.route;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: windowWidth > 375 ? 110 : 85,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'normal'\n        },\n        headerTitleAlign: \"center\",\n        headerBackTitleVisible: false\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Edit Printer Name\",\n    component: EditPrinterNameView,\n    options: function options(_ref8) {\n      var route = _ref8.route;\n      return {\n        headerStyle: {\n          backgroundColor: 'rgb(21, 34, 56)',\n          height: windowWidth > 375 ? 110 : 85,\n          shadowColor: 'transparent'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'normal'\n        },\n        headerTitleAlign: \"center\",\n        headerBackTitleVisible: false\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default withAuthenticator(App);","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/App.js"],"names":["Amplify","Storage","config","Auth","configure","React","useEffect","useState","useReducer","NavigationContainer","createStackNavigator","TouchableOpacity","DetailsScreen","SettingsPage","withAuthenticator","CardView","FileSystem","Permissions","Notifications","Provider","useSelector","useDispatch","updatePrinter","store","subscriptions","fetchPrinters","API","graphqlOperation","printersByOwner","listPrints","updatePrinterDict","EditPrinterView","EditPrinterNameView","YellowBox","ignoreWarnings","windowWidth","Dimensions","get","width","windowHeight","height","styles","StyleSheet","create","view","position","backgroundColor","image","paddingTop","paddingBottom","marginTop","shadowColor","borderRadius","touchable","alignItems","justifyContent","printerNameText","fontSize","textAlign","color","bottom","left","marginLeft","marginBottom","printerStatusText","right","marginRight","cardCompletionViewStyle","Math","round","borderColor","borderWidth","calculateTimeExpired","printer","currentTime","Date","printerUpdated","updatedAt","diff","abs","expiredTime","RenderButtons","navigation","listPrinters","state","listP","images","imageDict","dispatch","offlineDetection","i","forEach","printerState","status","timeExpired","newListPrinters","registerForPushNotificationsAsync","Constants","isDevice","getAsync","NOTIFICATIONS","existingStatus","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","console","log","setState","expoPushToken","Platform","OS","createChannelAndroidAsync","name","sound","priority","vibrate","setInterval","map","id","navigate","HomeScreen","flex","Stack","App","title","headerStyle","headerTintColor","headerTitleStyle","fontWeight","headerTitleAlign","headerRight","route","params","headerBackTitleVisible"],"mappings":"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","sourcesContent":["import Amplify, { Storage } from 'aws-amplify'\nimport config from './aws-exports'\nimport { Auth } from 'aws-amplify';\nAmplify.configure(config)\nimport 'react-native-gesture-handler';\nimport * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react'\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { DetailsScreen } from './DetailScreen.js';\nimport { SettingsPage } from './SettingsPage.js';\nimport { withAuthenticator } from 'aws-amplify-react-native'\nimport { CardView } from './CardView.js';\nimport * as FileSystem from 'expo-file-system';\nimport * as Permissions from 'expo-permissions';\nimport * as Notifications from 'expo-notifications';\nimport { Provider } from 'react-redux'; \nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from './updatePrinters.js';\nimport store from './store.js';\nimport * as subscriptions from './graphql/subscriptions';\nimport { fetchPrinters } from './FetchPrinters.js';\n\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { printersByOwner, listPrints } from './graphql/queries'\n\nimport { YellowBox } from 'react-native';\nimport { updatePrinterDict } from './updatePrinterDict';\nimport { EditPrinterView } from './EditPrinterView';\nimport { EditPrinterNameView } from './EditPrinterNameView.js';\n\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst styles = StyleSheet.create({\n  view: \n  {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  },\n  image: \n  {\n    width: windowWidth - 30,\n    height: windowHeight / 4,\n    paddingTop: '2%',\n    paddingBottom: '2%',\n    marginTop: 25,\n    shadowColor: 'transparent',\n    borderRadius:10\n  },\n  touchable:\n  {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor:'rgb(21, 34, 56)'\n  },\n  printerNameText: \n  {\n    fontSize: 200,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    left:0,\n    position: 'absolute',\n    marginLeft: 10,\n    marginBottom: 7\n  },\n  printerStatusText: \n  {\n    fontSize: 15,\n    textAlign: 'center',\n    color: 'white',\n    bottom: 0,\n    right:0,\n    position: 'absolute',\n    marginRight: 10,\n    marginBottom: 10\n  },\n  cardCompletionViewStyle:\n  {\n    borderRadius: Math.round(windowWidth + windowHeight) / 2,\n    width: windowWidth / (windowWidth/125),\n    height: windowWidth / (windowWidth/125),\n    borderColor: 'rgba(255, 255, 255, .3)', \n    borderWidth: 5,\n    alignItems: 'center',\n    position: 'absolute',\n    right: 0,\n    marginRight: 10,\n    marginTop: (windowHeight/60)\n  },\n})\n\n//Calculates if the printer has expired\nfunction calculateTimeExpired(printer)\n{\n  let currentTime = new Date()\n  let printerUpdated = new Date(printer.updatedAt)\n  let diff = Math.abs(currentTime - printerUpdated) / 1000;\n  let expiredTime = diff > (5 * 60)\n  return expiredTime\n}\n\nfunction RenderButtons({ navigation })\n{\n  const listPrinters = useSelector(state => { return state.listP })\n  const images = useSelector(state => { return state.imageDict })\n  \n  const dispatch = useDispatch()\n\n  useEffect(() => \n  {\n    fetchPrinters()\n  }, [])\n\n  //Detects if the printer has been disconnected\n  function offlineDetection()\n  {\n    let i = 0\n    listPrinters.forEach(function (printer) \n    {\n      if (printer.printerState != null)\n      {\n        if (printer.printerState.status != 0)\n        {\n          let timeExpired = calculateTimeExpired(printer)\n          \n          if (timeExpired)\n          {\n            var newListPrinters = [...listPrinters]\n            \n            newListPrinters[i].status = 0\n            dispatch(updatePrinter(newListPrinters))\n          }\n          i++\n        }\n      }\n    })\n  }\n  //Stuff for push notifications\n  registerForPushNotificationsAsync = async () => \n  {\n    if (Constants.isDevice) \n    {\n      const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') \n      {\n        const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') \n      {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      const token = await Notifications.getExpoPushTokenAsync();\n      console.log(token);\n      this.setState({ expoPushToken: token });\n    } else \n    {\n      alert('Must use physical device for Push Notifications');\n    }\n  \n    if (Platform.OS === 'android') \n    {\n      Notifications.createChannelAndroidAsync('default', \n      {\n        name: 'default',\n        sound: true,\n        priority: 'max',\n        vibrate: [0, 250, 250, 250],\n      });\n    }\n  };\n\n  setInterval(offlineDetection, 1000)\n\n  return listPrinters.map((printer) => \n  {\n    return (\n      <TouchableOpacity key={printer.id} style={styles.touchable} onPress={ () => navigation.navigate('Detail Screen', { printer: printer, images: images })}>\n        <CardView printer={printer} images={images} />\n      </TouchableOpacity>\n    );\n  });\n}\n\nfunction HomeScreen({ navigation }) \n{\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor:'rgb(21, 34, 56)' }}>\n      <ScrollView>\n        <RenderButtons navigation={navigation}/>\n      </ScrollView>\n    </View>\n  );\n}\nconst Stack = createStackNavigator();\n\nfunction App({ navigation }) \n{\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen \n            name=\"Printers\" \n            component={HomeScreen}  \n            options={({ navigation }) => ({\n              title: 'Printers',\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height:(windowWidth > 375 ? 110 : 85),\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'bold',\n                fontSize:30,\n                marginTop:30\n              },\n              headerTitleAlign: \"left\",\n              headerRight: () => (\n                <Button\n                  onPress={() => navigation.navigate('Settings')}\n                  title=\"Settings\"\n                  color='#7CFC00'\n                  marginRight= {20}\n                  marginTop= {20}\n                />\n              ),\n            })}\n          />\n          <Stack.Screen \n            name=\"Detail Screen\" \n            component={DetailsScreen}\n            options={({ route, navigation }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height:(windowWidth > 375 ? 110 : 85),\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'normal',\n              },\n              headerTitleAlign: \"center\",\n              title: route.params.printer.name,\n              headerBackTitleVisible: false,\n              headerRight: () => (\n                <Button\n                  onPress={() => navigation.navigate('Printer Settings', { printer: route.params.printer})}\n                  title='Edit'\n                  color='#7CFC00'\n                  marginRight={20}\n                  marginTop={20}\n                />\n              ),\n            })}\n            \n          />\n          <Stack.Screen \n            name=\"Settings\" \n            component={SettingsPage}\n            options={({ route }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height:(windowWidth > 375 ? 110 : 85),\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'normal',\n              },\n              headerTitleAlign: \"center\",\n              headerBackTitleVisible: false\n            })}\n          />\n          <Stack.Screen\n            name=\"Printer Settings\" \n            component={EditPrinterView}\n            options={({ route }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height:(windowWidth > 375 ? 110 : 85),\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'normal',\n              },\n              headerTitleAlign: \"center\",\n              headerBackTitleVisible: false\n            })}\n          />\n          <Stack.Screen\n            name=\"Edit Printer Name\" \n            component={EditPrinterNameView}\n            options={({ route }) => \n            ({\n              headerStyle: \n              {\n                backgroundColor: 'rgb(21, 34, 56)',\n                height:(windowWidth > 375 ? 110 : 85),\n                shadowColor: 'transparent'\n              },\n              headerTintColor: '#fff',\n              headerTitleStyle: \n              {\n                fontWeight: 'normal',\n              },\n              headerTitleAlign: \"center\",\n              headerBackTitleVisible: false\n            })}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n\nexport default withAuthenticator(App);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/CompletionView.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { OverlayView } from \"./OverlayView.js\";\nimport { getColor } from \"./Colors.js\";\nimport { CompletionViewStyles as styles } from \"./Styles.js\";\n\nvar propStyle = function propStyle(percent, base_degrees) {\n  var rotateBy = base_degrees + percent * 3.6;\n  return {\n    transform: [{\n      rotateZ: rotateBy + \"deg\"\n    }]\n  };\n};\n\nvar renderThirdLayer = function renderThirdLayer(percent, viewType) {\n  if (percent > 50) {\n    return React.createElement(View, {\n      style: [viewType == 'detail' ? styles.detailSecondProgressLayer : styles.cardSecondProgressLayer, propStyle(percent - 50, 45)],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return React.createElement(View, {\n      style: viewType == 'detail' ? styles.detailOffsetLayer : styles.cardOffsetLayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 12\n      }\n    });\n  }\n};\n\nfunction CompletionView(_ref) {\n  var text = _ref.text,\n      viewType = _ref.viewType,\n      fontSize = _ref.fontSize,\n      textPos = _ref.textPos,\n      printer = _ref.printer,\n      isCardView = _ref.isCardView,\n      percent = _ref.percent;\n  var firstProgressLayerStyle;\n  var color;\n\n  if (printer.printerState != null) {\n    if (printer.printerState.failure != null) {\n      if (printer.printerState.failure.currentPred != null) {\n        color = getColor(printer.printerState.failure.currentPred);\n      }\n    }\n  }\n\n  if (percent > 50) {\n    firstProgressLayerStyle = propStyle(50, -135);\n  } else {\n    firstProgressLayerStyle = propStyle(percent, -135);\n  }\n\n  return React.createElement(View, {\n    style: viewType == 'detail' ? styles.detailViewStyle : styles.cardViewStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [viewType == 'detail' ? styles.detailFirstProgressLayer : styles.cardFirstProgressLayer, firstProgressLayerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), renderThirdLayer(percent, viewType), React.createElement(OverlayView, {\n    compeletedText: text,\n    fontSize: fontSize,\n    textPos: textPos,\n    printer: printer,\n    isCardView: isCardView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport { CompletionView };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/CompletionView.js"],"names":["React","OverlayView","getColor","CompletionViewStyles","styles","propStyle","percent","base_degrees","rotateBy","transform","rotateZ","renderThirdLayer","viewType","detailSecondProgressLayer","cardSecondProgressLayer","detailOffsetLayer","cardOffsetLayer","CompletionView","text","fontSize","textPos","printer","isCardView","firstProgressLayerStyle","color","printerState","failure","currentPred","detailViewStyle","cardViewStyle","detailFirstProgressLayer","cardFirstProgressLayer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport { OverlayView } from './OverlayView.js';\nimport { getColor } from './Colors.js';\nimport { CompletionViewStyles as styles } from './Styles.js'\n\n/**\n* Override styles that get passed from props\n**/\nconst propStyle = (percent, base_degrees) => \n{\n  const rotateBy = base_degrees + (percent * 3.6);\n  return {\n    transform:[{rotateZ: `${rotateBy}deg`}]\n  };\n}\n\nconst renderThirdLayer = (percent, viewType) => \n{\n  if (percent > 50)\n  {\n    /**\n    * Third layer circle default is 45 degrees, so by default it occupies the right half semicircle.\n    * Since first 50 percent is already taken care  by second layer circle, hence we subtract it\n    * before passing to the propStyle function\n    **/\n    return <View style={[(viewType == 'detail' ? styles.detailSecondProgressLayer : styles.cardSecondProgressLayer), propStyle((percent - 50), 45) ]}/>\n  }else\n  {\n    return <View style={(viewType == 'detail' ? styles.detailOffsetLayer : styles.cardOffsetLayer)}/>\n  }\n}\n\nfunction CompletionView({ text, viewType, fontSize, textPos, printer, isCardView, percent })\n{\n  let firstProgressLayerStyle;\n  var color;\n\n  //Gets the color for the progress bar to be\n  if (printer.printerState != null)\n  {\n    if (printer.printerState.failure != null)\n    {\n      if (printer.printerState.failure.currentPred != null)\n      {\n        color = getColor(printer.printerState.failure.currentPred)\n      }\n    }\n  }\n  \n  //this calculates how many degrees the green arc should be rotated, that is what propStyle() returns\n  if (percent > 50)\n  {\n    firstProgressLayerStyle = propStyle(50, -135);\n  }else \n  {\n    firstProgressLayerStyle = propStyle(percent, -135);\n  }\n\n  return(\n    <View style= { (viewType == 'detail' ? styles.detailViewStyle : styles.cardViewStyle )}>\n      <View style={[(viewType == 'detail' ? styles.detailFirstProgressLayer : styles.cardFirstProgressLayer), firstProgressLayerStyle]}/>\n      {renderThirdLayer(percent, viewType)}\n      <OverlayView compeletedText={text} fontSize={fontSize} textPos={textPos} printer={printer} isCardView={isCardView} />\n    </View>\n  )\n}\n\nexport {CompletionView}; "]},"metadata":{},"sourceType":"module"}
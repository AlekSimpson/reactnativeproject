{"ast":null,"code":"var _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/CompletionView.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { OverlayView } from \"./OverlayView.js\";\nimport { getColor } from \"./Colors.js\";\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar CardSize = windowWidth / (windowWidth / (windowHeight / 6));\nvar DetailSize = windowWidth / (1 + Math.round((windowWidth / windowHeight + Number.EPSILON) * 10) / 10);\nvar borderRadius = Math.round(windowWidth + windowHeight) / 2;\nvar borderColor = '#8E99AB';\nvar fillColor = getColor();\nvar styles = StyleSheet.create({\n  cardViewStyle: {\n    borderRadius: borderRadius,\n    width: CardSize,\n    height: CardSize,\n    borderColor: borderColor,\n    borderWidth: 7,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 10,\n    marginTop: windowHeight / 60,\n    position: 'absolute',\n    right: 0,\n    shadowColor: 'black',\n    shadowOpacity: 0.5,\n    shadowRadius: 3\n  },\n  cardFirstProgressLayer: {\n    borderRadius: borderRadius,\n    width: CardSize,\n    height: CardSize,\n    borderWidth: 7,\n    position: 'absolute',\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: 'green',\n    borderTopColor: 'green',\n    transform: [{\n      rotateZ: '-135deg'\n    }]\n  },\n  cardSecondProgressLayer: {\n    borderRadius: borderRadius,\n    width: CardSize,\n    height: CardSize,\n    position: 'absolute',\n    borderWidth: 7,\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: 'green',\n    borderTopColor: 'green',\n    transform: [{\n      rotateZ: '45deg'\n    }]\n  },\n  cardOffsetLayer: {\n    borderRadius: borderRadius,\n    width: CardSize,\n    height: CardSize,\n    position: 'absolute',\n    borderWidth: 7,\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: borderColor,\n    borderTopColor: borderColor,\n    transform: [{\n      rotateZ: '-135deg'\n    }]\n  },\n  detailViewStyle: {\n    borderRadius: borderRadius,\n    width: DetailSize,\n    height: DetailSize,\n    borderColor: borderColor,\n    borderWidth: 10,\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 25,\n    position: 'absolute',\n    top: 0\n  },\n  detailFirstProgressLayer: {\n    borderRadius: borderRadius,\n    width: DetailSize,\n    height: DetailSize,\n    borderWidth: 10,\n    position: 'absolute',\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: 'green',\n    borderTopColor: 'green',\n    transform: [{\n      rotateZ: '-135deg'\n    }]\n  },\n  detailSecondProgressLayer: {\n    borderRadius: borderRadius,\n    width: DetailSize,\n    height: DetailSize,\n    position: 'absolute',\n    borderWidth: 10,\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: 'green',\n    borderTopColor: 'green',\n    transform: [{\n      rotateZ: '45deg'\n    }]\n  },\n  detailOffsetLayer: {\n    borderRadius: borderRadius,\n    width: DetailSize,\n    height: DetailSize,\n    position: 'absolute',\n    borderWidth: 10,\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: borderColor,\n    borderTopColor: borderColor,\n    transform: [{\n      rotateZ: '-135deg'\n    }]\n  }\n});\n\nvar propStyle = function propStyle(percent, base_degrees) {\n  var rotateBy = base_degrees + percent * 3.6;\n  return {\n    transform: [{\n      rotateZ: rotateBy + \"deg\"\n    }]\n  };\n};\n\nvar renderThirdLayer = function renderThirdLayer(percent, viewType) {\n  if (percent > 50) {\n    return React.createElement(View, {\n      style: [viewType == 'detail' ? styles.detailSecondProgressLayer : styles.cardSecondProgressLayer, propStyle(percent - 50, 45)],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return React.createElement(View, {\n      style: viewType == 'detail' ? styles.detailOffsetLayer : styles.cardOffsetLayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 12\n      }\n    });\n  }\n};\n\nfunction CompletionView(_ref) {\n  var text = _ref.text,\n      viewType = _ref.viewType,\n      fontSize = _ref.fontSize,\n      textPos = _ref.textPos,\n      printer = _ref.printer,\n      isCardView = _ref.isCardView,\n      percent = _ref.percent;\n  var firstProgressLayerStyle;\n  var color;\n\n  if (printer.printerState != null) {\n    if (printer.printerState.failure != null) {\n      if (printer.printerState.failure.currentPred != null) {\n        color = getColor(printer.printerState.failure.currentPred);\n      }\n    }\n  }\n\n  if (percent > 50) {\n    firstProgressLayerStyle = propStyle(50, -135);\n  } else {\n    firstProgressLayerStyle = propStyle(percent, -135);\n  }\n\n  return React.createElement(View, {\n    style: viewType == 'detail' ? styles.detailViewStyle : styles.cardViewStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [viewType == 'detail' ? styles.detailFirstProgressLayer : styles.cardFirstProgressLayer, firstProgressLayerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }), renderThirdLayer(percent, viewType), React.createElement(OverlayView, {\n    compeletedText: text,\n    fontSize: fontSize,\n    textPos: textPos,\n    printer: printer,\n    isCardView: isCardView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport { CompletionView };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/CompletionView.js"],"names":["React","OverlayView","getColor","windowWidth","Dimensions","get","width","windowHeight","height","CardSize","DetailSize","Math","round","Number","EPSILON","borderRadius","borderColor","fillColor","styles","StyleSheet","create","cardViewStyle","borderWidth","alignItems","justifyContent","marginRight","marginTop","position","right","shadowColor","shadowOpacity","shadowRadius","cardFirstProgressLayer","borderLeftColor","borderBottomColor","borderRightColor","borderTopColor","transform","rotateZ","cardSecondProgressLayer","cardOffsetLayer","detailViewStyle","flexDirection","marginBottom","top","detailFirstProgressLayer","detailSecondProgressLayer","detailOffsetLayer","propStyle","percent","base_degrees","rotateBy","renderThirdLayer","viewType","CompletionView","text","fontSize","textPos","printer","isCardView","firstProgressLayerStyle","color","printerState","failure","currentPred"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport { OverlayView } from './OverlayView.js';\nimport { getColor } from './Colors.js';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst CardSize = windowWidth / (windowWidth/(windowHeight/6))\nconst DetailSize = windowWidth / (1 + Math.round(((windowWidth / windowHeight) + Number.EPSILON) * 10) / 10)\nconst borderRadius = Math.round(windowWidth + windowHeight) / 2\n\nconst borderColor = '#8E99AB'\nconst fillColor = getColor()\n\nconst styles = StyleSheet.create({\n  //Card view progress layers\n  cardViewStyle:\n  {\n    borderRadius: borderRadius,\n    width: CardSize,\n    height: CardSize,\n    borderColor: borderColor, \n    borderWidth: 7,\n    alignItems: 'center', \n    justifyContent: 'center',\n    marginRight: 10,\n    marginTop: (windowHeight/60),\n    position: 'absolute',\n    right: 0,\n    shadowColor: 'black',\n    shadowOpacity: 0.5,\n    shadowRadius: 3,\n  },\n  cardFirstProgressLayer: \n  {\n    borderRadius: borderRadius,\n    width: CardSize,\n    height: CardSize,\n    borderWidth: 7,\n    position: 'absolute',\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: 'green', //<-- this hex color might have to change (it probably will)\n    borderTopColor: 'green',\n    transform:[{rotateZ: '-135deg'}]\n  },\n  cardSecondProgressLayer:\n  {\n    borderRadius: borderRadius,\n    width: CardSize,\n    height: CardSize,\n    position: 'absolute',\n    borderWidth: 7,\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: 'green',\n    borderTopColor: 'green',\n    transform: [{rotateZ: '45deg'}]\n  },\n  cardOffsetLayer: \n  {\n    borderRadius: borderRadius,\n    width: CardSize,\n    height: CardSize,\n    position: 'absolute',\n    borderWidth: 7,\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: borderColor,\n    borderTopColor: borderColor,\n    transform:[{rotateZ: '-135deg'}]\n  },\n  // Deatil screen progress layers\n  detailViewStyle:\n  {\n    borderRadius: borderRadius,\n    width: DetailSize,\n    height: DetailSize,\n    borderColor: borderColor, \n    borderWidth: 10,\n    flexDirection: 'column', \n    alignItems: 'center', \n    justifyContent: 'center',\n    marginBottom: 25,\n    position: 'absolute',\n    top: 0\n  },\n  detailFirstProgressLayer: \n  {\n    borderRadius: borderRadius,\n    width: DetailSize,\n    height: DetailSize,\n    borderWidth: 10,\n    position: 'absolute',\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: 'green', //<-- this hex color might have to change (it probably will)\n    borderTopColor: 'green',\n    transform:[{rotateZ: '-135deg'}]\n  },\n  detailSecondProgressLayer:\n  {\n    borderRadius: borderRadius,\n    width: DetailSize,\n    height: DetailSize,\n    position: 'absolute',\n    borderWidth: 10,\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: 'green',\n    borderTopColor: 'green',\n    transform: [{rotateZ: '45deg'}]\n  },\n  detailOffsetLayer: \n  {\n    borderRadius: borderRadius,\n    width: DetailSize,\n    height: DetailSize,\n    position: 'absolute',\n    borderWidth: 10,\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderRightColor: borderColor,\n    borderTopColor: borderColor,\n    transform:[{rotateZ: '-135deg'}]\n  }\n})\n\n/**\n* Override styles that get passed from props\n**/\nconst propStyle = (percent, base_degrees) => \n{\n  const rotateBy = base_degrees + (percent * 3.6);\n  return {\n    transform:[{rotateZ: `${rotateBy}deg`}]\n  };\n}\n\nconst renderThirdLayer = (percent, viewType) => \n{\n  if (percent > 50)\n  {\n    /**\n    * Third layer circle default is 45 degrees, so by default it occupies the right half semicircle.\n    * Since first 50 percent is already taken care  by second layer circle, hence we subtract it\n    * before passing to the propStyle function\n    **/\n    return <View style={[(viewType == 'detail' ? styles.detailSecondProgressLayer : styles.cardSecondProgressLayer), propStyle((percent - 50), 45) ]}/>\n  }else\n  {\n    return <View style={(viewType == 'detail' ? styles.detailOffsetLayer : styles.cardOffsetLayer)}/>\n  }\n}\n\nfunction CompletionView({ text, viewType, fontSize, textPos, printer, isCardView, percent })\n{\n  let firstProgressLayerStyle;\n  var color;\n\n  //Gets the color for the progress bar to be\n  if (printer.printerState != null)\n  {\n    if (printer.printerState.failure != null)\n    {\n      if (printer.printerState.failure.currentPred != null)\n      {\n        color = getColor(printer.printerState.failure.currentPred)\n      }\n    }\n  }\n  \n  //this calculates how many degrees the green arc should be rotated, that is what propStyle() returns\n  if (percent > 50)\n  {\n    firstProgressLayerStyle = propStyle(50, -135);\n  }else \n  {\n    firstProgressLayerStyle = propStyle(percent, -135);\n  }\n\n  return(\n    <View style= { (viewType == 'detail' ? styles.detailViewStyle : styles.cardViewStyle )}>\n      <View style={[(viewType == 'detail' ? styles.detailFirstProgressLayer : styles.cardFirstProgressLayer), firstProgressLayerStyle]}/>\n      {renderThirdLayer(percent, viewType)}\n      <OverlayView compeletedText={text} fontSize={fontSize} textPos={textPos} printer={printer} isCardView={isCardView} />\n    </View>\n  )\n}\n\nexport {CompletionView}; "]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"/Users/aleksimpson/Desktop/Cogniprint/EditPrinterView.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport { Divider } from \"./Divider.js\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { updatePrinter } from \"./updatePrinters.js\";\nimport { useEffect, useState, useReducer } from 'react';\nimport { find } from 'react-native-redash';\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 15,\n    color: 'gray',\n    marginLeft: 10,\n    marginBottom: 10\n  },\n  backgroundColor: {\n    width: windowWidth - 20,\n    backgroundColor: 'rgb(25, 40, 65)',\n    alignSelf: 'center',\n    borderRadius: 10\n  },\n  container: {\n    backgroundColor: 'rgb(21, 34, 56)',\n    flex: 1,\n    flexDirection: 'column'\n  }\n});\n\nfunction EditPrinterView(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var temp;\n  var printer = route.params.printer;\n  var listPrinters = useSelector(function (state) {\n    temp = _toConsumableArray(state.listP);\n    return state.listP;\n  });\n\n  function findPrinter() {\n    var returnVal;\n\n    for (i = 0; i < listPrinters.length; i++) {\n      if (printer.id == listPrinters[i].id) {\n        returnVal = i;\n      }\n    }\n\n    return returnVal;\n  }\n\n  var i = findPrinter();\n  var displayedPrinter = listPrinters[i];\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"Printer Options\"), React.createElement(View, {\n    style: styles.backgroundColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      flexDirection: 'row'\n    },\n    onPress: function onPress() {\n      return navigation.navigate('Edit Printer Name', {\n        printer: printer\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white',\n      fontSize: 15,\n      marginLeft: 10,\n      marginTop: 15,\n      marginBottom: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }, \"Name: \", displayedPrinter.name), React.createElement(Text, {\n    style: {\n      color: 'green',\n      fontSize: 15,\n      marginRight: 10,\n      marginTop: 15,\n      marginBottom: 20,\n      position: 'absolute',\n      right: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }, \"icon\")), React.createElement(Divider, {\n    width: windowWidth - 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }), React.createElement(TouchableOpacity, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white',\n      fontSize: 15,\n      marginLeft: 10,\n      marginTop: 15,\n      marginBottom: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, \"Sensitivity\")), React.createElement(Divider, {\n    width: windowWidth - 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }), React.createElement(SwitchView, {\n    text: 'Notify on failure',\n    printer: printer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }), React.createElement(Divider, {\n    width: windowWidth - 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }), React.createElement(SwitchView, {\n    text: 'Pause on failure',\n    printer: printer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }))));\n}\n\nfunction SwitchView(props) {\n  var OFcodes = {\n    'Notify on failure': props.printer.notifyOnFail,\n    'Pause on failure': props.printer.pauseOnFail\n  };\n  var temp;\n  var listPrinters = useSelector(function (state) {\n    temp = _toConsumableArray(state.listP);\n    return state.listP;\n  });\n  var dispatch = useDispatch();\n\n  var _useState = useState(OFcodes[props.text]),\n      _useState2 = _slicedToArray(_useState, 2),\n      switchBool = _useState2[0],\n      setBool = _useState2[1];\n\n  function findPrinterIndex() {\n    var returnValue;\n\n    for (i = 0; i < temp.length; i++) {\n      if (temp[i].id == props.printer.id) {\n        returnValue = 1;\n        break;\n      }\n    }\n\n    return returnValue;\n  }\n\n  function updateNOF(newValue) {\n    var array = _toConsumableArray(listPrinters);\n\n    var i = findPrinterIndex();\n\n    if (props.text == 'Notify on failure') {\n      array[i].notifyOnFail = newValue;\n    } else {\n      array[i].pauseOnFail = newValue;\n    }\n\n    dispatch(updatePrinter(array));\n    setBool(newValue);\n  }\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white',\n      fontSize: 15,\n      marginLeft: 10,\n      marginTop: 15,\n      marginBottom: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, props.text)), React.createElement(Switch, {\n    style: {\n      position: 'absolute',\n      right: 0,\n      marginRight: 10,\n      marginTop: 10\n    },\n    trackColor: {\n      false: 'gray',\n      true: 'green'\n    },\n    thumbColor: \"white\",\n    ios_backgroundColor: \"gray\",\n    onValueChange: function onValueChange(value) {\n      console.log('THIS IS THE VALUE ', value);\n      updateNOF(value);\n    },\n    value: switchBool,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport { EditPrinterView };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/EditPrinterView.js"],"names":["React","Divider","useSelector","useDispatch","TouchableOpacity","updatePrinter","useEffect","useState","useReducer","find","windowWidth","Dimensions","get","width","windowHeight","height","styles","StyleSheet","create","text","fontSize","color","marginLeft","marginBottom","backgroundColor","alignSelf","borderRadius","container","flex","flexDirection","EditPrinterView","route","navigation","temp","printer","params","listPrinters","state","listP","findPrinter","returnVal","i","length","id","displayedPrinter","navigate","marginTop","name","marginRight","position","right","SwitchView","props","OFcodes","notifyOnFail","pauseOnFail","dispatch","switchBool","setBool","findPrinterIndex","returnValue","updateNOF","newValue","array","false","true","value","console","log"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground, Switch } from 'react-native';\nimport { Divider } from './Divider.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { updatePrinter } from './updatePrinters.js';\nimport { useEffect, useState, useReducer } from 'react'\nimport { find } from 'react-native-redash';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst styles = StyleSheet.create({\n    text: \n    {\n        fontSize: 15, \n        color: 'gray', \n        marginLeft: 10, \n        marginBottom: 10,\n    },\n    backgroundColor:\n    {\n        width: windowWidth - 20,\n        backgroundColor: 'rgb(25, 40, 65)',\n        alignSelf: 'center',\n        borderRadius: 10,\n    },\n    container: \n    {\n        backgroundColor: 'rgb(21, 34, 56)',\n        flex: 1,\n        flexDirection: 'column'\n    }\n  })\n\nfunction EditPrinterView({route, navigation})\n{\n    var temp;\n    const { printer } = route.params;\n\n    const listPrinters = useSelector(state => { temp = [...state.listP]; return state.listP })\n\n    function findPrinter()\n    {\n        var returnVal;\n\n        for (i = 0; i < listPrinters.length; i++)\n        {\n            if (printer.id == listPrinters[i].id)\n            {\n                returnVal = i\n            }\n        }\n\n        return returnVal\n    }\n\n    let i = findPrinter()\n    var displayedPrinter = listPrinters[i]\n\n    return(\n        <React.Fragment>\n            <View style={ styles.container }>\n                <Text style={ styles.text }>Printer Options</Text>\n                <View style={ styles.backgroundColor }>\n                    <TouchableOpacity style={{ flexDirection: 'row' }} onPress={() => navigation.navigate('Edit Printer Name', { printer: printer })} >\n                        <Text style={{ color: 'white', fontSize: 15, marginLeft: 10, marginTop: 15, marginBottom: 10 }}>Name: { displayedPrinter.name }</Text>\n                        <Text style={{ color: 'green', fontSize: 15, marginRight: 10, marginTop: 15, marginBottom: 20, position: 'absolute', right: 0 }}>icon</Text>\n                    </TouchableOpacity>\n                    <Divider width={windowWidth - 20}/>\n                    <TouchableOpacity>\n                        <Text style={{ color: 'white', fontSize: 15, marginLeft: 10, marginTop: 15, marginBottom: 10 }}>Sensitivity</Text>\n                    </TouchableOpacity>\n                    <Divider width={windowWidth - 20}/>\n                    <SwitchView text={'Notify on failure'} printer={printer} />\n                    <Divider width={windowWidth - 20}/>\n                    <SwitchView text={'Pause on failure'} printer={printer}/>\n                </View>\n            </View>\n        </React.Fragment>\n    )\n}\n\nfunction SwitchView(props)\n{\n    var OFcodes = { 'Notify on failure':props.printer.notifyOnFail, 'Pause on failure':props.printer.pauseOnFail }\n\n    var temp;\n    const listPrinters = useSelector(state => { temp = [...state.listP]; return state.listP })\n    const dispatch = useDispatch()\n\n    const [switchBool, setBool] = useState(OFcodes[props.text])\n\n    function findPrinterIndex()\n    {\n        var returnValue;\n\n        for (i=0; i<temp.length; i++)\n        {\n            if (temp[i].id == props.printer.id)\n            {\n                returnValue = 1\n                break\n            }\n        }\n\n        return returnValue\n    }\n    //Updates the \n    function updateNOF(newValue)\n    {\n        var array = [...listPrinters]\n        var i = findPrinterIndex()\n\n        if (props.text == 'Notify on failure')\n        {\n            array[i].notifyOnFail = newValue\n        }else \n        {\n            array[i].pauseOnFail = newValue\n        }\n        \n        dispatch(updatePrinter(array))\n\n        setBool(newValue)\n    }\n\n    return(\n        <View>\n            <TouchableOpacity>\n                <Text style={{ color: 'white', fontSize: 15, marginLeft: 10, marginTop: 15, marginBottom: 10 }}>{props.text}</Text>\n            </TouchableOpacity>\n            <Switch\n                style={{position: 'absolute', right: 0, marginRight: 10, marginTop: 10 }}\n                trackColor={{ false: 'gray', true: 'green' }}\n                thumbColor=\"white\"\n                ios_backgroundColor=\"gray\"\n                onValueChange={(value) => { console.log('THIS IS THE VALUE ', value); updateNOF(value)}}\n                value={switchBool}\n            />\n        </View>\n    )\n}\n\nexport { EditPrinterView };"]},"metadata":{},"sourceType":"module"}
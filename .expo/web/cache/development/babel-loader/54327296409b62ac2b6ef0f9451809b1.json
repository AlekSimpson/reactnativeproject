{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FileSystem from 'expo-file-system';\nimport { updatePrinter } from \"./updatePrinters.js\";\nimport { updatePrinterDict } from \"./updatePrinterDict.js\";\nimport store from \"./store.js\";\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation, Storage } from 'aws-amplify';\nimport { printersByOwner, listPrints } from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar printerImageDict = {};\nvar tempListPrinters = [];\nvar isWeb = Platform.OS === 'web' ? true : false;\n\nfunction fetchPrinters() {\n  var nextToken,\n      refresh,\n      sortMethod,\n      isResort,\n      sortPrintersBy,\n      user,\n      printerData,\n      printers,\n      newNextToken,\n      data,\n      addToDict,\n      downloadImage,\n      downloadAllImages,\n      saveImage,\n      checkForSavedData,\n      retrieveFromStorage,\n      clearStorage,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function fetchPrinters$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          clearStorage = function _clearStorage() {\n            var persistentCleared, i;\n            return _regeneratorRuntime.async(function clearStorage$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(checkForSavedData());\n\n                  case 2:\n                    persistentCleared = _context2.sent;\n\n                    if (persistentCleared.length !== 0) {\n                      for (i = 0; i < Object.keys(images).length; i++) {\n                        FileSystem.deleteAsync(images[Object.keys(images)[i]]);\n                      }\n                    }\n\n                  case 4:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          retrieveFromStorage = function _retrieveFromStorage() {\n            for (var i = 0; i < tempListPrinters.length; i++) {\n              var path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg';\n              addToDict(tempListPrinters[i].id, path, false);\n            }\n          };\n\n          checkForSavedData = function _checkForSavedData() {\n            var returnValue, i, path, _data;\n\n            return _regeneratorRuntime.async(function checkForSavedData$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    returnValue = [];\n\n                    if (isWeb) {\n                      _context.next = 12;\n                      break;\n                    }\n\n                    i = 0;\n\n                  case 3:\n                    if (!(i < tempListPrinters.length)) {\n                      _context.next = 12;\n                      break;\n                    }\n\n                    path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg';\n                    _context.next = 7;\n                    return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(path));\n\n                  case 7:\n                    _data = _context.sent;\n\n                    if (_data.exists) {\n                      returnValue = returnValue.concat(path);\n                    }\n\n                  case 9:\n                    i++;\n                    _context.next = 3;\n                    break;\n\n                  case 12:\n                    return _context.abrupt(\"return\", returnValue);\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          saveImage = function _saveImage(key, value) {\n            FileSystem.downloadAsync(value, FileSystem.documentDirectory + key).then(function (_ref) {\n              var uri = _ref.uri;\n            }).catch(function (error) {\n              console.error(error);\n            });\n          };\n\n          downloadAllImages = function _downloadAllImages() {\n            for (var i = 0; i < tempListPrinters.length; i++) {\n              downloadImage(tempListPrinters[i]);\n            }\n          };\n\n          downloadImage = function _downloadImage(printer) {\n            Storage.get(printer.picture.key, {\n              level: 'public',\n              customPrefix: {\n                public: ''\n              }\n            }).then(function (result) {\n              return addToDict(printer.id, result, true);\n            }).catch(function (err) {\n              return console.log(err);\n            });\n          };\n\n          addToDict = function _addToDict(key, value, save) {\n            printerImageDict[key] = value;\n\n            if (save) {\n              saveImage(key + '.jpg', value);\n            }\n\n            if (Object.keys(printerImageDict).length == tempListPrinters.length) {\n              store.dispatch(updatePrinterDict(printerImageDict));\n              printerImageDict = {};\n              tempListPrinters = [];\n            }\n          };\n\n          sortPrintersBy = function _sortPrintersBy(method) {\n            function sortByFailureRisk() {\n              tempListPrinters.sort(function (a, b) {\n                return b.status - a.status;\n              });\n              tempListPrinters.sort(function (a, b) {\n                var aPred = a.printerState != null && a.printerState.failure != null && a.printerState.failure.currentPred != null ? a.printerState.failure.currentPred : 0.0;\n                var bPred = b.printerState != null && b.printerState.failure != null && b.printerState.failure.currentPred != null ? b.printerState.failure.currentPred : 0.0;\n                return bPred - aPred;\n              });\n            }\n\n            switch (method) {\n              case 'Failure Risk':\n                sortByFailureRisk();\n                break;\n\n              case 'Alphabetical Order':\n                tempListPrinters.sort(function (a, b) {\n                  var fa = a.name.toLowerCase(),\n                      fb = b.name.toLowerCase();\n\n                  if (fa < fb) {\n                    return -1;\n                  }\n\n                  if (fa > fb) {\n                    return 1;\n                  }\n\n                  return 0;\n                });\n                break;\n\n              default:\n                sortByFailureRisk();\n            }\n          };\n\n          nextToken = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : null;\n          refresh = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : false;\n          sortMethod = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : 'Failure Risk';\n          isResort = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : false;\n\n          if (refresh && nextToken == null) {\n            clearStorage();\n          }\n\n          _context3.prev = 13;\n          _context3.next = 16;\n          return _regeneratorRuntime.awrap(Auth.currentUserInfo());\n\n        case 16:\n          user = _context3.sent;\n          _context3.next = 19;\n          return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(printersByOwner, {\n            owner: user.username,\n            nextToken: nextToken\n          })));\n\n        case 19:\n          printerData = _context3.sent;\n          printers = printerData.data.printersByOwner.items;\n          newNextToken = printerData.data.printersByOwner.nextToken;\n          tempListPrinters = tempListPrinters.concat(printers);\n\n          if (!(newNextToken != null)) {\n            _context3.next = 27;\n            break;\n          }\n\n          fetchPrinters(newNextToken, refresh, sortMethod);\n          _context3.next = 35;\n          break;\n\n        case 27:\n          sortPrintersBy(sortMethod);\n          store.dispatch(updatePrinter(tempListPrinters));\n\n          if (isResort) {\n            _context3.next = 35;\n            break;\n          }\n\n          _context3.next = 32;\n          return _regeneratorRuntime.awrap(checkForSavedData());\n\n        case 32:\n          data = _context3.sent;\n\n          if (data.length !== 0 && !refresh) {\n            retrieveFromStorage();\n          } else {\n            downloadAllImages();\n          }\n\n          if (!refresh) {}\n\n        case 35:\n          _context3.next = 40;\n          break;\n\n        case 37:\n          _context3.prev = 37;\n          _context3.t0 = _context3[\"catch\"](13);\n          console.log(_context3.t0);\n\n        case 40:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[13, 37]], Promise);\n}\n\nexport { fetchPrinters };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/FetchPrinters.js"],"names":["FileSystem","updatePrinter","updatePrinterDict","store","Auth","Amplify","API","graphqlOperation","Storage","printersByOwner","listPrints","subscriptions","printerImageDict","tempListPrinters","isWeb","Platform","OS","fetchPrinters","sortPrintersBy","addToDict","downloadImage","downloadAllImages","saveImage","checkForSavedData","retrieveFromStorage","clearStorage","persistentCleared","length","i","Object","keys","images","deleteAsync","path","documentDirectory","id","returnValue","getInfoAsync","data","exists","concat","key","value","downloadAsync","then","uri","catch","error","console","printer","get","picture","level","customPrefix","public","result","err","log","save","dispatch","method","sortByFailureRisk","sort","a","b","status","aPred","printerState","failure","currentPred","bPred","fa","name","toLowerCase","fb","nextToken","refresh","sortMethod","isResort","currentUserInfo","user","graphql","owner","username","printerData","printers","items","newNextToken"],"mappings":"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","sourcesContent":["import * as FileSystem from 'expo-file-system';\nimport { updatePrinter } from './updatePrinters.js';\nimport { updatePrinterDict } from './updatePrinterDict.js';\nimport store from './store.js';\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation, Storage } from 'aws-amplify';\nimport { printersByOwner, listPrints } from './graphql/queries'\nimport * as subscriptions from './graphql/subscriptions';\nimport { Platform } from 'react-native'\n\nvar printerImageDict = {};\n\nvar tempListPrinters = []\n\nvar isWeb = (Platform.OS === 'web' ? true : false)\n\n//Fetches the printer data from the API\nasync function fetchPrinters(nextToken = null, refresh = false, sortMethod = 'Failure Risk', isResort = false)\n{\n    if ((refresh) && (nextToken == null))\n    {\n        clearStorage()\n    }\n    //Sorts the fetched printers\n    function sortPrintersBy(method)\n    {\n        function sortByFailureRisk()\n        {\n            tempListPrinters.sort((a, b) => {\n                return b.status - a.status;\n            })\n            tempListPrinters.sort((a, b) => {\n                let aPred = ((a.printerState != null && a.printerState.failure != null && a.printerState.failure.currentPred != null) ? a.printerState.failure.currentPred : 0.0)\n                let bPred = ((b.printerState != null && b.printerState.failure != null && b.printerState.failure.currentPred != null) ? b.printerState.failure.currentPred : 0.0)\n                return bPred - aPred\n            })\n        }\n        switch (method)\n        {\n            case 'Failure Risk':\n                sortByFailureRisk()\n                break \n            case 'Alphabetical Order':\n                tempListPrinters.sort((a, b) => {\n                    let fa = a.name.toLowerCase(),\n                        fb = b.name.toLowerCase()\n                    \n                    if (fa < fb)\n                    {\n                        return -1\n                    }\n                    if (fa > fb)\n                    {\n                        return 1\n                    }\n\n                    return 0\n                })\n                break\n            default: \n                //sort by failure risk by default\n                sortByFailureRisk()\n        }\n    }\n\n    try\n    {\n        const user = await Auth.currentUserInfo();\n        const printerData = await API.graphql(graphqlOperation(printersByOwner, {owner: user.username, nextToken: nextToken}))\n        const printers = printerData.data.printersByOwner.items\n        \n        let newNextToken = printerData.data.printersByOwner.nextToken\n        \n        tempListPrinters = tempListPrinters.concat(printers)\n\n        if (newNextToken != null)\n        {\n            fetchPrinters(newNextToken, refresh, sortMethod)\n        }else \n        {\n            sortPrintersBy(sortMethod)\n\n            store.dispatch(updatePrinter(tempListPrinters))\n            \n            if (!isResort)\n            {\n                let data = await checkForSavedData()\n                if (data.length !== 0 && (!refresh))\n                {\n                    retrieveFromStorage()\n                }else \n                {\n                    downloadAllImages()\n                }\n                if (!refresh)\n                {\n                    //Subscribe to creation of Todo\n                    // const subscription = API.graphql(\n                    //     graphqlOperation(subscriptions.onCreateTodo)\n                    // ).subscribe({\n                    //     next: (todoData) => console.log(todoData)\n                    // });\n                }\n            }\n        }\n    } catch (err) { console.log(err) }\n\n    //Adds the printer to the image dictionary\n    function addToDict(key, value, save)\n    {\n        printerImageDict[key] = value\n        if (save)\n        {\n            saveImage(key + '.jpg', value)\n        }\n        if (Object.keys(printerImageDict).length == tempListPrinters.length)\n        {\n            store.dispatch(updatePrinterDict(printerImageDict))\n            printerImageDict = {}\n            tempListPrinters = []\n        }\n    }\n\n    //Gets the s3Image url\n    function downloadImage(printer)\n    {\n        Storage.get(printer.picture.key, { level: 'public', customPrefix: { public: ''} })\n            .then(result => addToDict(printer.id, result, true))\n            .catch(err => console.log(err));\n    }\n\n    //Downloads all images\n    function downloadAllImages()\n    {\n        for (var i = 0; i < tempListPrinters.length; i++)\n        {\n            downloadImage(tempListPrinters[i])\n        }\n    }\n\n    //saves new data (url = value, fileName = key)\n    function saveImage(key, value)\n    {\n        FileSystem.downloadAsync(value, FileSystem.documentDirectory + key)\n            .then(({ uri }) => \n            {\n                //console.log('Finished downloading to ', uri);\n            })\n            .catch(error => \n            {\n                console.error(error);\n            });\n    }\n\n    //checks if data has already been saved\n    async function checkForSavedData()\n    {\n        var returnValue = []\n        if (!isWeb)\n        {\n            for (var i = 0; i < tempListPrinters.length; i++)\n            {\n                let path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg'\n                let data = await FileSystem.getInfoAsync(path)\n                if (data.exists)\n                {\n                    returnValue = returnValue.concat(path)\n                }\n            }\n        }\n        return returnValue\n    }\n\n    //retrieves all saved\n    function retrieveFromStorage()\n    {\n        for (var i = 0; i < tempListPrinters.length; i++)\n        {\n            let path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg'\n\n            addToDict(tempListPrinters[i].id, path, false)\n        }\n    }\n\n    //Clears out all persistent data being stored for new data\n    async function clearStorage()\n    {\n        //Refactor this with the clear function in SaveDataManager.js\n        let persistentCleared = await checkForSavedData()\n        if (persistentCleared.length !== 0)\n        {\n            for (var i = 0; i<Object.keys(images).length; i++)\n            {\n                FileSystem.deleteAsync(images[Object.keys(images)[i]])\n            }\n        }\n    }\n}\n\nexport { fetchPrinters };"]},"metadata":{},"sourceType":"module"}
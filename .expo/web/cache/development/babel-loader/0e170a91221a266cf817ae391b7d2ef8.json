{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport * as FileSystem from 'expo-file-system';\nimport { Provider } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from \"./updatePrinters.js\";\nimport { updatePrinterDict } from \"./updatePrinterDict.js\";\nimport store from \"./store.js\";\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\nimport { printersByOwner, listPrints } from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nvar printerImageDict = {};\nvar tempListPrinters = [];\n\nfunction fetchPrinters() {\n  var nextToken,\n      user,\n      printerData,\n      printers,\n      newNextToken,\n      data,\n      subscription,\n      addToDict,\n      downloadImage,\n      downloadAllImages,\n      saveImage,\n      checkForSavedData,\n      retrieveFromStorage,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function fetchPrinters$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          retrieveFromStorage = function _retrieveFromStorage() {\n            for (i = 0; i < tempListPrinters.length; i++) {\n              var path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg';\n              addToDict(tempListPrinters[i].id, path, false);\n            }\n          };\n\n          checkForSavedData = function _checkForSavedData() {\n            var returnValue, path, _data;\n\n            return _regeneratorRuntime.async(function checkForSavedData$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    returnValue = [];\n                    i = 0;\n\n                  case 2:\n                    if (!(i < tempListPrinters.length)) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg';\n                    _context.next = 6;\n                    return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(path));\n\n                  case 6:\n                    _data = _context.sent;\n\n                    if (_data.exists) {\n                      returnValue = returnValue.concat(path);\n                    }\n\n                  case 8:\n                    i++;\n                    _context.next = 2;\n                    break;\n\n                  case 11:\n                    return _context.abrupt(\"return\", returnValue);\n\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          saveImage = function _saveImage(url, fileName) {\n            FileSystem.downloadAsync(url, FileSystem.documentDirectory + fileName).then(function (_ref) {\n              var uri = _ref.uri;\n              console.log('Finished downloading to ', uri);\n            }).catch(function (error) {\n              console.error(error);\n            });\n          };\n\n          downloadAllImages = function _downloadAllImages() {\n            for (i = 0; i < tempListPrinters.length; i++) {\n              downloadImage(tempListPrinters[i]);\n            }\n          };\n\n          downloadImage = function _downloadImage(printer) {\n            Storage.get(printer.picture.key, {\n              level: 'public',\n              customPrefix: {\n                public: ''\n              }\n            }).then(function (result) {\n              return addToDict(printer.id, result, true);\n            }).catch(function (err) {\n              return console.log(err);\n            });\n          };\n\n          addToDict = function _addToDict(key, value, save) {\n            printerImageDict[key] = value;\n\n            if (save) {\n              saveImage(value, key + '.jpg');\n            }\n\n            if (Object.keys(printerImageDict).length == tempListPrinters.length) {\n              store.dispatch(updatePrinterDict(printerImageDict));\n            }\n          };\n\n          nextToken = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : null;\n          _context2.prev = 7;\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(Auth.currentUserInfo());\n\n        case 10:\n          user = _context2.sent;\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(printersByOwner, {\n            owner: user.username,\n            nextToken: nextToken\n          })));\n\n        case 13:\n          printerData = _context2.sent;\n          printers = printerData.data.printersByOwner.items;\n          newNextToken = printerData.data.printersByOwner.nextToken;\n          tempListPrinters = tempListPrinters.concat(printers);\n\n          if (!(newNextToken != null)) {\n            _context2.next = 21;\n            break;\n          }\n\n          fetchPrinters(newNextToken);\n          _context2.next = 27;\n          break;\n\n        case 21:\n          store.dispatch(updatePrinter(tempListPrinters));\n          _context2.next = 24;\n          return _regeneratorRuntime.awrap(checkForSavedData());\n\n        case 24:\n          data = _context2.sent;\n\n          if (data.length !== 0) {\n            retrieveFromStorage();\n          } else {\n            downloadAllImages();\n          }\n\n          subscription = API.graphql(graphqlOperation(subscriptions.onCreateTodo)).subscribe({\n            next: function next(todoData) {\n              return console.log(todoData);\n            }\n          });\n\n        case 27:\n          _context2.next = 32;\n          break;\n\n        case 29:\n          _context2.prev = 29;\n          _context2.t0 = _context2[\"catch\"](7);\n          console.log(_context2.t0);\n\n        case 32:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[7, 29]], Promise);\n}\n\nexport { fetchPrinters };","map":{"version":3,"sources":["/Users/aleksimpson/Desktop/Cogniprint/FetchPrinters.js"],"names":["React","useEffect","useState","useReducer","FileSystem","Provider","useSelector","useDispatch","updatePrinter","updatePrinterDict","store","Auth","Amplify","API","graphqlOperation","printersByOwner","listPrints","subscriptions","printerImageDict","tempListPrinters","fetchPrinters","addToDict","downloadImage","downloadAllImages","saveImage","checkForSavedData","retrieveFromStorage","i","length","path","documentDirectory","id","returnValue","getInfoAsync","data","exists","concat","url","fileName","downloadAsync","then","uri","console","log","catch","error","printer","Storage","get","picture","key","level","customPrefix","public","result","err","value","save","Object","keys","dispatch","nextToken","currentUserInfo","user","graphql","owner","username","printerData","printers","items","newNextToken","subscription","onCreateTodo","subscribe","next","todoData"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect, useState, useReducer } from 'react'\nimport { View, Text, Button, StyleSheet, Image, ScrollView, Dimensions, ImageBackground } from 'react-native';\nimport * as FileSystem from 'expo-file-system';\nimport { Provider } from 'react-redux'; \nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePrinter } from './updatePrinters.js';\nimport { updatePrinterDict } from './updatePrinterDict.js';\nimport store from './store.js';\nimport { Auth } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\nimport { printersByOwner, listPrints } from './graphql/queries'\nimport * as subscriptions from './graphql/subscriptions';\n\n\nvar printerImageDict = {};\n\nvar tempListPrinters = []\n\n//Fetches the printer data from the API\nasync function fetchPrinters(nextToken = null) \n{\n    try\n    {\n        const user = await Auth.currentUserInfo();\n        const printerData = await API.graphql(graphqlOperation(printersByOwner, {owner: user.username, nextToken: nextToken}))\n        const printers = printerData.data.printersByOwner.items\n        \n        let newNextToken = printerData.data.printersByOwner.nextToken\n        \n        tempListPrinters = tempListPrinters.concat(printers)\n\n        if (newNextToken != null)\n        {\n            fetchPrinters(newNextToken)\n        }else \n        {\n            store.dispatch(updatePrinter(tempListPrinters))\n            //deleteSavedData()\n            let data = await checkForSavedData()\n            if (data.length !== 0)\n            {\n                retrieveFromStorage()\n            }else \n            {\n                downloadAllImages()\n            }\n            // Subscribe to creation of Todo\n            const subscription = API.graphql(\n                graphqlOperation(subscriptions.onCreateTodo)\n            ).subscribe({\n                next: (todoData) => console.log(todoData)\n            });\n            //Other stuff that comes later\n        }\n    } catch (err) { console.log(err) }\n\n\n    //Adds the printer to the image dictionary\n    function addToDict(key, value, save)\n    {\n        printerImageDict[key] = value\n        if (save)\n        {\n            saveImage(value, key + '.jpg')\n        }\n        if (Object.keys(printerImageDict).length == tempListPrinters.length)\n        {\n            store.dispatch(updatePrinterDict(printerImageDict))\n        }\n    }\n\n    //Gets the s3Image url\n    function downloadImage(printer)\n    {\n        Storage.get(printer.picture.key, { level: 'public', customPrefix: { public: ''} })\n            .then(result => addToDict(printer.id, result, true))\n            .catch(err => console.log(err));\n    }\n\n    //Downloads all images\n    function downloadAllImages()\n    {\n        for (i = 0; i < tempListPrinters.length; i++)\n        {\n            downloadImage(tempListPrinters[i])\n        }\n    }\n\n    //saves new data\n    function saveImage(url, fileName)\n    {\n        FileSystem.downloadAsync(url, FileSystem.documentDirectory + fileName)//printerID.jpg\n            .then(({ uri }) => \n            {\n                console.log('Finished downloading to ', uri);\n            })\n            .catch(error => \n            {\n                console.error(error);\n            });\n    }\n\n    //checks if data has already been saved\n    async function checkForSavedData()\n    {\n        var returnValue = []\n        for (i = 0; i < tempListPrinters.length; i++)\n        {\n            let path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg'\n            let data = await FileSystem.getInfoAsync(path)\n            if (data.exists)\n            {\n                returnValue = returnValue.concat(path)\n            }\n        }\n        return returnValue\n    }\n\n    //retrieves all saved\n    function retrieveFromStorage()\n    {\n        for (i = 0; i < tempListPrinters.length; i++)\n        {\n            let path = FileSystem.documentDirectory + tempListPrinters[i].id + '.jpg'\n\n            addToDict(tempListPrinters[i].id, path, false)\n        }\n    }\n}\n\nexport { fetchPrinters };"]},"metadata":{},"sourceType":"module"}